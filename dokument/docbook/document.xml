<para>
  Lizenz: Creative Commons CC-BY-SA
</para>
<sect1 id="einleitung">
  <title>Einleitung</title>
  <para>
    Dieses Dokument wird bei seiner Fertigstellung die Spezifikation des
    OParl Schnittstellen-Standards für parlamentarische
    Informationssysteme (Ratsinformationssysteme, RIS) darstellen. Es
    dient damit als Grundlage für die Implementierung von
    OParl-konformen Server- und Clientanwendungen.
  </para>
  <sect2 id="status">
    <title>Status</title>
    <para>
      Die Spezifikation befindet sich in Arbeit. Das Dokument enthält
      entsprechend viele Ungenauigkeiten und Hinweise auf offene
      Fragestellungen.
    </para>
    <para>
      Die Kennzeichnung &quot;TODO&quot; markiert Hinweise, die für die
      Bearbeiter des Dokuments gedacht sind. Darunter befinden sich auch
      Fragen an deren Beantwortung durch Reviewer des Dokuments die
      Autoren interessiert sind.
    </para>
  </sect2>
  <sect2 id="was-ist-oparl">
    <title>Was ist OParl?</title>
    <para>
      (TODO: Nachfolgend eine Übernahme aus dem bisherigen Abschnitt
      &quot;Funktionsumfang der OParl-Schnittstelle&quot;. Der Text
      sollte deutlich überarbeitet und erweitert werden.)
    </para>
    <para>
      Die vorliegende Spezifikation soll eine Webservice-Schnittstelle
      definieren, die den anonymen und lesenden Zugriff auf öffentliche
      Inhalte aus Parlamentarischen Informationssystemen ermöglicht. Die
      Zugriffe erfolgen über das Hypertext Transfer Protocol (HTTP).
      Daten werden als JSON oder als JSONP ausgeliefert.
    </para>
    <para>
      Die Spezifikation wird obligatorische Bestandteile (MUSS) und
      optionale Bestandteile (KANN) haben. Der tatsächliche
      Funktionsumfang kann daher zwischen den Implementierungen
      variieren.
    </para>
  </sect2>
  <sect2 id="zielsetzung-von-oparl">
    <title>Zielsetzung von OParl</title>
    <para>
      OParl richtet sich an vielvältige Nutzergruppen (Stakeholder):
    </para>
    <itemizedlist>
      <listitem>
        <para>
          Verwaltung und politische Gremien in Kommunen
        </para>
      </listitem>
      <listitem>
        <para>
          Bürger, politische Parteien und Organisationen
        </para>
      </listitem>
      <listitem>
        <para>
          Open Data Initiativen
        </para>
      </listitem>
      <listitem>
        <para>
          Wissenschaftler
        </para>
      </listitem>
      <listitem>
        <para>
          Anbieter von RIS-Pflegesoftware oder -services
        </para>
      </listitem>
      <listitem>
        <para>
          Anbieter von RIS-Darstellungssoftware oder -services
        </para>
      </listitem>
      <listitem>
        <para>
          Anbieter von Linked Data-Plattformen oder -Services
        </para>
      </listitem>
    </itemizedlist>
    <para>
      TODO: Nutzen für jede Stakeholder-Gruppe TODO: Linked Data
      erwähnen
    </para>
    <para>
      Die Gründe, warum Betreiber von parlamentarischen
      Informationssystemen den Zugriff darauf über eine standardisierte
      Schnittstelle ermöglichen sollten, können vielfältig sein.
    </para>
    <para>
      Ein zentrales Argument ist die Verpflichtung der Parlamente
      gegenüber der Bevölkerung, diese über die Fortschritte der
      parlamentarischen Arbeit zu informieren und auf dem Laufenden zu
      halten. Ein erster Schritt, der Bevölkerung Einblicke in die
      Arbeit und Zugriff auf Dokumente zu gewähren, ist vielerorts in
      den letzten Jahren durch Einführung von Ratsinformationssystemen
      mit anonymem, lesenden Zugriff über das World Wide Web gemacht
      worden.
    </para>
    <para>
      Die damit eingeschlagene Richtung konsequent weiter zu gehen,
      bedeutet, die Daten der parlamentarischen Informationssystemen
      gänzlich offen zu legen, sofern die Inhalte es erlauben. Es
      bedeutet, die Daten und Inhalte so universell weiterverwendbar und
      so barrierearm wie möglich anzubieten, dass jegliche weitere
      Verwendung durch Dritte technisch möglich ist. Der seit einiger
      Zeit etablierte Begriff für dieses Prinzip heißt &quot;Open
      Data&quot;.
    </para>
    <para>
      Das Interesse an parlamentarischen Informationen und an
      Anwendungen, die diese nutzbar und auswertbar machen, ist
      offensichtlich vorhanden. Die Entwickler der alternativen
      Ratsinformationssysteme wie Frankfurt Gestalten[14], Offenes
      Köln[15] oder der OpenRuhr:RIS-Instanzen[16] wissen zu berichten,
      wie viel Interesse den Projekten gerade aus Orten entgegen
      gebracht wird, in denen derartige Systeme noch nicht verfügbar
      sind.
    </para>
    <para>
      Die Anwendungsmöglichkeiten für parlamentarische Informationen,
      wenn sie über eine Schnittstelle schnell und einfach abgerufen
      werden können, sind vielfältig. Beispiele sind:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          Apps für den Abruf auf mobilen Endgeräten
        </para>
      </listitem>
      <listitem>
        <para>
          Möglichkeiten zur Wiedergabe für Nutzerinnen und Nutzer mit
          Beeinträchtigung des Sehvermögens
        </para>
      </listitem>
      <listitem>
        <para>
          Alternative und erweiterte Suchmöglichkeiten in Inhalten
        </para>
      </listitem>
      <listitem>
        <para>
          Auswertung und Analyse von Themen, Inhalten, Sprache etc.
        </para>
      </listitem>
      <listitem>
        <para>
          Benachrichtigungsfunktionen beim Erscheinen bestimmte Inhalte
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Die Standardisierung dieses Zugriffs über die Grenzen einzelner
      Systeme hinweg erlaubt zudem, diese Entwicklungen
      grenzüberschreitend zu denken. Damit steigt nicht nur die
      potenzielle Nutzerschaft einzelner Entwicklungen. Auch das
      Potenzial für Kooperationen zwischen Anwendungsentwicklern wächst.
    </para>
    <para>
      Darüber hinaus sind auch Motivationen innerhalb von Organisationen
      und Körperschaften erkennbar. So sollen parlamentarische
      Informationssysteme vielerorts in verschiedenste Prozesse und
      heterogene Systemlandschaften integriert werden. Durch eine
      einheitliche Schnittstelle bieten sich effiziente Möglichkeiten
      zur Integration der Daten in anderen Systeme, wie beispielsweise
      Web-Portale.
    </para>
  </sect2>
  <sect2 id="transparenz-und-beteiligung-durch-open-data">
    <title>Transparenz und Beteiligung durch Open Data</title>
    <para>
      Öffentliche Stellen verfügen über vielfältige Informationen und
      Daten. Seit einigen Jahren sind zivilgesellschaftliche
      Organisationen sowie Politik und Verwaltung unter dem Schlagwort
      &quot;Open Data&quot; international und auch in Deutschland in
      unterschiedlichem Maße um eine stärkere Öffnung dieser Daten
      bemüht<footnote>
        <para>
          Eine weltweite Übersicht zu Open-Data-Projekten bietet z.B.
          der
          <ulink url="http://opendata-showroom.org/de/">Open-Data-Showroom</ulink>
        </para>
      </footnote>. Bei dem Ansatz
      &quot;<ulink url="https://de.wikipedia.org/wiki/Open_data">Open
      Data</ulink>&quot; geht es darum diese Daten so bereitzustellen,
      dass Dritte diese einfacher finden und weiterverwenden können. Die
      <ulink url="https://sunlightfoundation.com/policy/documents/ten-open-data-principles/">zehn
      Open-Data-Prinzipien der Sunlight-Foundation</ulink> beschreiben
      die Offenheit von Datensätzen. Wesentlich dabei sind vor allem die
      einfache rechtliche und die technische Offenheit. Bei ersterer
      geht es darum, dass Datensätze unter Nutzungsbestimmungen
      bereitgestellt werden, die kurz und verständlich formuliert sind
      und mindestens jegliche weitere Verwendung inklusive der
      kommerziellen erlauben unter der Voraussetzung, dass bei der
      Weiterverwendung die Quelle benannt wird. Bei der technischen
      Offenheit steht die Bereitstellung von Datensätzen in möglichst
      maschinenlesbaren Formaten im Vordergrund. Dies bedeutet, stärker
      strukturierte Datensätze sind in der Bereitstellung zu bevorzugen.
      Liegen Daten innerhalb einer Organisation in einer Datenbank vor,
      so bietet es sich an, diese soweit möglich über eine
      Programmierschnittstelle (API) für Außenstehende bereitzustellen.
    </para>
    <para>
      Die Erfüllung dieser rechtlichen und technischen Offenheit erlaubt
      es Dritten, dies können Bürgerinnen und Bürger, Unternehmen,
      Forschungseinrichtungen oder auch andere Verwaltungseinheiten
      sein, die Verwaltungsdaten wesentlich unkomplizierter für eigene
      Vorhaben wie Anwendungen oder Visualisierungen einzusetzen. Mit
      dem Ansatz offener Verwaltungsdaten soll so erstens mehr
      Transparenz über Prozesse und Entscheidungen in Politik und
      Verwaltung erreicht werden. Zweitens können Dritte auf Grundlage
      dieser Daten leichter eigene Geschäftsmodelle verfeinern oder neue
      entwickeln. Drittens wird es auch öffentlichen Stellen selbst
      leichter bereits im öffentlichen Sektor existierende Daten zu
      finden und weiterzuverwenden.
    </para>
    <para>
      Wie das Prinzip offener Daten bzw. offener Verwaltungsdaten über
      die Minimalprinzipien rechtlicher und technischer Offenheit hinaus
      am besten erreicht werden kann erfordert im Einzelfall häufig eine
      Zusammenarbeit von Datenbereitstellern und potentiellen
      Datennutzern. Die bloße Bereitstellung einer OParl-konformen API
      wird weder die Einhaltung der technischen Prinzipien, noch der
      weiteren Open-Data-Prinzipien vollständig garantieren. Viele
      Bestandteile der Oparl Spezifikation, die einen weitgehend
      barrierearmen Zugang zu Informationen ermöglichen, sind optional
      (Beispiel: Volltexte von Dokumenten über die API abrufbar machen).
      Andere Bestandteile, die von Interesse wären, sind noch gar nicht
      von OParl abgedeckt (Beispiel: Abstimmungsergebnisse). Grund dafür
      ist, dass sich OParl in einem frühen Stadium befindet und primär
      am Status Quo der parlamentarischen Informationssysteme
      ausgerichtet ist. Es liegt also auch weiterhin an Verwaltung und
      Politik, durch einen verantwortungsvollen Umgang mit den Systemen
      die maximal erreichbare Transparenz zu bieten. Das fängt bei
      Dokumentenformaten an (ein PDF mit digitalem Text weist weit
      weniger Barrieren auf, als ein gescannter Brief, der ebenfalls als
      PDF gespeichert wurde) und hört bei der verwendeten Sprache
      auf<footnote>
        <para>
          Weitere generelle Informationen zur Bereitstellung offener
          Verwaltungsdaten bieten bspw.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              Praktische Informationen:
              <ulink url="http://opendatahandbook.org/de/how-to-open-up-data/index.html">Open-Data-Handbook</ulink>
              der Open Knowledge Foundation
            </para>
          </listitem>
          <listitem>
            <para>
              Grundsätzliche Informationen: Die vom Bundesministerium
              des Innern beauftragte Studie
              &quot;<ulink url="http://www.bmi.bund.de/SharedDocs/Downloads/DE/Themen/OED_Verwaltung/ModerneVerwaltung/opengovernment.pdf?__blob=publicationFile">Open
              Government Data Deutschland</ulink>&quot; (PDF)
            </para>
          </listitem>
        </itemizedlist>
      </footnote>.
    </para>
  </sect2>
  <sect2 id="werdegang-von-oparl-1.0">
    <title>Werdegang von OParl 1.0</title>
    <para>
      Stichpunkte:
    </para>
    <itemizedlist>
      <listitem>
        <orderedlist numeration="arabic">
          <listitem override="17">
            <para>
              und 18. November 2012: Die Open Knowledge Foundation
              Deutschland veranstaltet in den Räumen der
              Heinrich-Böll-Stiftung in Berlin einen Workshop für
              Entwickler von Anwendungen, die einen gesellschaftlichen
              Nutzen bringen sollen. Hier ist VITAKO, die
              Bundes-Arbeitsgemeinschaft der Kommunalen
              IT-Dienstleister, als Sponsor engagiert. Die
              Geschäftsführerin, Dr. Marianne Wulff, ist persönlich vor
              Ort. Auch das Projekt Offenes Köln wird in einem Vortrag
              von Marian Steinbach präsentiert. Es kommt zum Austausch
              über die Frage, wie das Prinzip der offenen
              Ratsinformationen effektiv auf weitere Kommunen
              ausgeweitet werden könnte.
            </para>
          </listitem>
        </orderedlist>
      </listitem>
      <listitem>
        <orderedlist numeration="arabic">
          <listitem override="6">
            <para>
              Dezember 2012: Anhörung im Landtag NRW in Düsseldorf zu
              einer Open-Data-Strategie der Landesregierung, wo Jens
              Klessmann und Marian Steinbach als Sachverständige gehört
              werden. Danach Gespräch über Möglichkeiten der
              Standardisierung offener Ratsinformationssysteme.
            </para>
          </listitem>
        </orderedlist>
      </listitem>
      <listitem>
        <para>
          Dezember 2012: Dr. Marianne Wulff, Jens Klessmann und Marian
          Steinbach beginnen mit der Abstimmung über einen Workshop mit
          Vertreterinnen und Vertretern von Kommunen, kommunalen
          IT-Dienstleistern, RIS-Anbietern und Zivilgesellschaft. Ziel:
          Die Bereitschaft zur Zusammenarbeit an einem gemeinsamen
          Standard ermitteln. Unterdessen beginnt Marian Steinbach mit
          der Formulierung eines Standard-Entwurfs als
          Diskussionsgrundlage. Der Entwurf wird von Beginn an
          öffentlich auf GitHub.com bereit gestellt.
        </para>
      </listitem>
      <listitem>
        <orderedlist numeration="arabic">
          <listitem override="17">
            <para>
              April 2013: Insgesamt 30 Teilnehmer versammeln sich in
              Köln, um sich in einem ersten Treffen über Ziele und
              Chancen einer Standardisierung für offene
              Ratsinformationen auszutauschen. Als Ergebnis wird ein
              großes Interesse an der weiteren Zusammenarbeit auf Basis
              des vorliegenden Standardentwurfs festgestellt. Als Termin
              für die Fertigstellung der ersten Version der
              Spezifikation wird der 30. Juni 2013 festgelegt. Die
              Initiatoren präsentieren den Anwesenden hier erstmals den
              Namen &quot;OParl&quot;, der künftig als Marke für die
              Bemühungen der Gruppe stehen soll.
            </para>
          </listitem>
        </orderedlist>
      </listitem>
      <listitem>
        <orderedlist numeration="arabic">
          <listitem override="22">
            <para>
              Januar 2014: Nachdem sich die verteilte Zusammenarbeit am
              Standard-Entwurf seit April 2013 als nicht zielführend
              erwiesen hat, laden Jens Klessmann und Marian Steinbach
              und VITAKO zu einem eintägigen OParl-Workshop in Bielefeld
              ein. Das Ziel ist, die Spezifikation so weit wie möglich
              voran zu treiben und eine gute Basis für die baldige
              Fertigstellung zu legen.
            </para>
          </listitem>
        </orderedlist>
      </listitem>
      <listitem>
        <orderedlist numeration="arabic">
          <listitem override="26">
            <para>
              Januar 2014: In Düsseldorf findet ein weiterer Workshop
              zur Arbeit am Entwurf der Spezifikation statt.
            </para>
          </listitem>
        </orderedlist>
      </listitem>
      <listitem>
        <para>
          April 2014: Verfeinerung des Vokabular-Teils durch Andreas
          Kuckartz, finanziert durch das FP7-Projekt Fusepool aus
          Mitteln der Europäischen Union.
        </para>
      </listitem>
      <listitem>
        <orderedlist numeration="arabic">
          <listitem override="6">
            <para>
              Mai 2014: Beginn der Review-Phase. Interessierte sind
              aufgerufen, den vorliegenden Entwurf bis Ende Mai zu
              kommentieren.
            </para>
          </listitem>
        </orderedlist>
      </listitem>
      <listitem>
        <para>
          Ende Mai 2014: Telefonkonferenz zum eingegangenen Feedback aus
          der Review-Phase
        </para>
      </listitem>
      <listitem>
        <para>
          KW 23 (2. bis 6. Juni): Geplante Veröffentlichung der
          Spezifikation 1.0
        </para>
      </listitem>
    </itemizedlist>
  </sect2>
  <sect2 id="zukunft-von-oparl">
    <title>Zukunft von OParl</title>
    <para>
      TODO: - Verfeinerung, Lücken schliessen - Erweiterung über die
      kommunale Ebene hinaus (Land, Bund) - Vereinheitlichung von
      Kategorien (Drucksachentypen, Arten von Gremien) - Erweiterung von
      Personendaten, z.B. mit Social Media URLs - Mehr Abfragekriterien
      - Suchfunktionen (Volltextsuche) - Abstimmungsverhalten und
      maschinenlesbare Protokolle - Verknüpfung mit verteilten Social
      Media Plattformen - Schreibender Zugriff. Auch dazu muss das Rad
      nicht neu erfunden werden. Bestehende bzw. in Entwicklung
      befindliche Spezifikationen und Techniken aus der Linked Data-Welt
      können verwendet werden. Dazu gehören insbesondere die Linked Data
      Platform des W3C und Hydra.
    </para>
  </sect2>
</sect1>
<sect1 id="globalisierung">
  <title>Globalisierung</title>
  <para>
    Es gibt in sehr vielen Ländern Gebietskörperschaften mit politischen
    Gremien, deren Prozesse ähnlich strukturiert sind wie diejenigen in
    Deutschland. Auch dort besteht Bedarf an standardisierten
    Vokabularen zur Veröffentlichung parlamentarischer Informationen.
    Deshalb sind - teilweise noch vor OParl - auch weitere entsprechende
    Initiativen entstanden. Eine enge Zusammenarbeit mit diesen
    Initiativen mit dem Ziel der Wiederverwendung von Arbeitsergebnissen
    wird deshalb angestrebt. Auch aus diesem Grund wurde bereits in
    OParl 1.0 die Möglichkeit der Verwendung mit anderen Sprachen und
    Mehrsprachigkeit eingebaut.
  </para>
  <para>
    TODO: Popolo, UK, KB Niederlande
  </para>
  <sect2 id="nomenklatur-der-spezifikation-und-satzkonventionen">
    <title>Nomenklatur der Spezifikation und Satzkonventionen</title>
    <sect3 id="müssen-sollen-und-können-bzw.-zwingend-empfohlen-und-optional">
      <title>MÜSSEN, SOLLEN und KÖNNEN bzw. ZWINGEND, EMPFOHLEN und
      OPTIONAL</title>
      <para>
        Dieses Spezifikationsdokument nutzt die Modalverben müssen,
        können und sollen in einer Art und Weise, die bestimmte
        Anforderungen möglichst unmissverständlich in drei verschiedene
        Abstufung einteilen lässt. Um ihre normative Bedeutung zu
        unterstreichen, werden diese Wörter grundsätzlich in
        Großbuchstaben gesetzt.
      </para>
      <para>
        Diese Konvention ist angelehnt an die Definitionen der Begriffe
        MUST, SHOULD und MAY (bzw. MUST NOT, SHOULD NOT und MAY NOT) aus
        RFC2119.<footnote>
          <para>
            RFC2119
            <ulink url="http://tools.ietf.org/html/rfc2119">http://tools.ietf.org/html/rfc2119</ulink>
          </para>
        </footnote>
      </para>
      <para>
        Die Bedeutung im Einzelnen:
      </para>
      <variablelist>
        <varlistentry>
          <term>
            MÜSSEN/MUSS bzw. ZWINGEND:
          </term>
          <listitem>
            <para>
              Die Erfüllung einer Anforderung, die explizit vom
              Modalverb MÜSSEN bzw. MUSS Gebrauch macht, ist zwingend
              erforderlich.
            </para>
            <para>
              Die Entsprechung in RFC2119 lautet &quot;MUST&quot;,
              &quot;REQUIRED&quot; oder &quot;SHALL&quot;.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            NICHT DÜRFEN/DARF NICHT:
          </term>
          <listitem>
            <para>
              Dieses Stichwort kennzeichnet ein absolutes Verbot.
            </para>
            <para>
              Die Entsprechung in RFC2119 lautet &quot;MUST NOT&quot;
              oder &quot;SHALL NOT&quot;.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            SOLLEN/SOLL bzw. EMPFOHLEN:
          </term>
          <listitem>
            <para>
              Mit dem Wort SOLLEN bzw. SOLL sind empfohlene
              Anforderungen gekennzeichnet, die von jeder
              Implementierung erfüllt werden sollen. Eine Nichterfüllung
              ist als Nachteil zu verstehen, beispielsweise weil die
              Nutzerfreundlichkeit dadurch Einbußen erleidet, und sollte
              daher sorgfältig abgewogen werden.
            </para>
            <para>
              Die Entsprechung in RFC2119 lautet &quot;SHOULD&quot; oder
              &quot;RECOMMENDED&quot;.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            NICHT SOLLEN/SOLL NICHT bzw. NICHT EMPFOHLEN:
          </term>
          <listitem>
            <para>
              Diese Formulierung wird verwendet, wenn unter gewissen
              Umständen Gründe existieren können, die ein bestimmtes
              Verhalten akzeptabel oder sogar nützlich erscheinen
              lassen, jedoch die Auswirkung des Verhaltens vor einer
              entsprechenden Implementierung verstanden und abgewogen
              werden sollen.
            </para>
            <para>
              Die Entsprechung in RFC2119 lautet &quot;SHOULD NOT&quot;
              oder &quot;NOT RECOMMENDED&quot;.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            DÜRFEN/DARF bzw. OPTIONAL:
          </term>
          <listitem>
            <para>
              Mit dem Wort DÜRFEN bzw. DARF oder OPTIONAL sind optionale
              Bestandteile gekennzeichnet. Ein Anbieter könnte sich
              entscheiden, den entsprechenden Bestandteil aufgrund
              besonderer Kundenanforderungen zu unterstützen, während
              andere diesen Bestandteil ignorieren könnten.
              Implementierer von Clients oder Servern DÜRFEN in solchen
              Fällen NICHT davon ausgehen, dass der jeweilige
              Kommunikationspartner den entsprechenden, optionalen
              Anteil unterstützt.
            </para>
            <para>
              Die Entsprechung in RFC2119 lautet &quot;MAY&quot; oder
              &quot;OPTIONAL&quot;.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect3>
    <sect3 id="besondere-hervorhebungen-und-satzkonventionen">
      <title>Besondere Hervorhebungen und Satzkonventionen</title>
      <para>
        TODO
      </para>
    </sect3>
  </sect2>
  <sect2 id="initiatoren">
    <title>Initiatoren</title>
    <para>
      TODO
    </para>
  </sect2>
  <sect2 id="unterstützer">
    <title>Unterstützer</title>
    <para>
      TODO
    </para>
  </sect2>
  <sect2 id="autoren">
    <title>Autoren</title>
    <para>
      An diesem Dokument haben mitgewirkt:
    </para>
    <para>
      Felix Ebert, Jan Erhardt, Jens Klessmann, Andreas Kuckartz, Babett
      Schalitz, Marian Steinbach, Thomas Tursics, Jakob Voss
    </para>
  </sect2>
</sect1>
<sect1 id="architektur">
  <title>Architektur</title>
  <para>
    In diesem Abschnitt werden grundlegenden Konzepte, die von OParl
    abgedeckt werden, erläutert. Die Erläuterungen sind nicht im engeren
    Sinne Teil der Spezifikation, sondern dienen dazu, die
    Anwendungsbereiche von OParl und die Funktionen einer
    OParl-konformen API verständlicher und konkreter beschreiben zu
    können.
  </para>
  <para>
    Da die Architektur auf der generellen Architektur des World Wide Web
    (WWW) aufbaut, sind einzelne Konzepte direkt den Begriffen der
    Architekturbeschreibung des W3-Konsortiums entlehnt.<footnote>
      <para>
        Architecture of the World Wide Web, Volume One.
        <ulink url="http://www.w3.org/TR/webarch/">http://www.w3.org/TR/webarch/</ulink>
      </para>
    </footnote>
  </para>
  <sect2 id="überblick">
    <title>Überblick</title>
    <figure>
      <title>Architekturdiagramm</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/architektur-ueberblick.png" />
        </imageobject>
        <textobject><phrase>Architekturdiagramm</phrase></textobject>
      </mediaobject>
    </figure>
  </sect2>
  <sect2 id="parlamentarisches_infosystem">
    <title>Parlamentarisches Informationssystem</title>
    <para>
      Parlamentarische Informationssysteme sind Software-Systeme, die
      von verschiedensten Körperschaften eingesetzt werden, um die
      Zusammenarbeit von Parlamenten zu organisieren, zu dokumentieren
      und öffentlich nachvollziehbar zu machen.
    </para>
    <para>
      Im kommunalen Umfeld in Deutschland, wo das Parlament je nach Art
      der Kommune häufig als Stadtrat oder Gemeinderat bezeichnet wird,
      hat sich für diese Art von Informationssystem auch der Begriff
      &quot;Ratsinformationssystem&quot; (kurz &quot;RIS&quot;)
      etabliert.
    </para>
    <para>
      Parlamentarische Informationssysteme sind jedoch nicht auf die
      kommunale Ebene begrenzt. Ähnliche Systeme werden auch auf Ebene
      z.B. von Landkreisen, Regierungsbezirken und diversen
      Zweckverbänden eingesetzt.
    </para>
    <para>
      Diese Systeme unterstützen in der Regel mehrere der folgenden
      Funktionen:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          Das Erzeugen, Bearbeiten und Darstellen von Sitzungen und
          deren Tagesordnung
        </para>
      </listitem>
      <listitem>
        <para>
          Das Erzeugen und Abrufen von Sitzungsprotokollen
        </para>
      </listitem>
      <listitem>
        <para>
          Das Erzeugen, Bearbeiten und Anzeigen von Drucksachen
        </para>
      </listitem>
      <listitem>
        <para>
          Das Erzeugen, Bearbeiten und Anzeigen von Gremien und deren
          Mitgliedern
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Funktionen, die die Eingabe und Bearbeitung von Daten betreffen,
      sind in der Regel einem geschlossenen Nutzerkreis vorbehalten. Die
      Darstellung und der Abruf von Informationen und Dokumenten
      hingegen ist in vielen Fällen für die Öffentlichkeit freigegeben.
    </para>
    <para>
      Die OParl Spezifikation beschreibt eine Schnittstelle, die den
      maschinellen, lesenden Zugriff auf derartige Informationen
      ermöglicht.
    </para>
  </sect2>
  <sect2 id="server">
    <title>Server</title>
    <para>
      Der Server im Sinne dieser Spezifikation ist ein Software-Dienst,
      der auf einem mit dem Internet verbundenen Rechnersystem läuft.
      Dieser Dienst ist eine spezielle Form eines WWW- bzw.
      HTTP(S)-Servers. Entsprechend beantwortet der Server
      HTTP-Anfragen, die an ihn auf einem bestimmten TCP-Port gestellt
      werden.
    </para>
    <para>
      Der Server ist als Bestandteil des parlamentarischen
      Informationssystems zu verstehen. Der Betrieb des Servers steht
      damit üblicherweise in der Verantwortung desjenigen, der das
      parlamentarischen Informationssystem betreibt.
    </para>
    <para>
      Von einem Server, der die OParl-Spezifikation erfüllt, wird
      erwartet, dass er bestimmte parlamentarische Informationen in
      einem bestimmten Format zur Verfügung stellt und auf bestimmte
      Anfragen von so genannten Clients über die OParl API entsprechend
      dieser Spezifikation reagiert.
    </para>
  </sect2>
  <sect2 id="api">
    <title>API</title>
    <para>
      Der Begriff API steht in diesem Dokument für die
      Webservice-Schnittstelle, die der Server anbietet. Die
      Schnittstelle basiert auf dem HTTP-Protokoll. Mittels HTTPS ist
      wahlweise auch die verschlüsselte Nutzung der API möglich, sofern
      Server dies unterstützt.
    </para>
    <para>
      Die API steht im Mittelpunkt dieser Spezifikation. Server und
      Clients sind als Kommunikationspartner zu verstehen, die über das
      Internet als Kommunikationskanal mit einander kommunizieren
      können. Die API-Spezifikation stellt dabei die nötige Grammatik
      und das Vokabular bereit, anhand dessen eine sinnvolle
      Kommunikation erfolgen kann.
    </para>
  </sect2>
  <sect2 id="client">
    <title>Client</title>
    <para>
      Der Begriff &quot;Client&quot; steht für eine Software, die über
      die OParl API mit dem Server kommuniziert. Da die API auf dem
      HTTP-Protokoll aufbaut, handelt es sich bei dem Client um eine
      spezielle Form eines HTTP-Clients.
    </para>
  </sect2>
  <sect2 id="cache">
    <title>Cache</title>
    <para>
      Ein Cache ist ein Speicher, der einem Client dazu dienen kann, von
      einem Server abgerufene Informationen längerfristig vorzuhalten.
      Dies kann beispielsweise dazu dienen, mehrfache Anfragen der
      selben Informationen zu vermeiden, wodurch sowohl Ressourcen auf
      Seite des Servers geschohnt als auch die Nutzung von
      Netzwerkbandbreite reduziert werden kann. Die Nutzung eines Cache
      kann auch zur Verbesserung der Nutzerfreundlichkeit eines Clients
      beitragen, indem Wartezeiten zur Bereitstellung einer Ressource
      verkürzt werden.
    </para>
  </sect2>
  <sect2 id="nutzerin">
    <title>Nutzerin oder Nutzer</title>
    <para>
      Mit einer Nutzerin oder einem Nutzer ist in diesem Fall eine
      natürliche Person gemeint, die mittels eines OParl-Clients auf
      parlamentarische Informationen zugreift.
    </para>
  </sect2>
  <sect2 id="objekt">
    <title>Objekt</title>
    <para>
      Der Server beantwortet Anfragen eines Clients im Regelfall, indem
      bestimmte Objekte ausgegeben werden. Objekte sind im Fall einer
      OParl-konformen API JSON-Objekte, die das Schema einhalten, das in
      der vorliegenden Spezifikation beaschrieben wird. Antworten des
      Servers können einzelne Objekte, Listen von Objekten oder Listen
      von URLs von Objekten enthalten.
    </para>
  </sect2>
</sect1>
<sect1 id="nutzungsszenarien">
  <title>Nutzungsszenarien</title>
  <para>
    Die nachfolgenden Nutzungsszenarien dienen dazu, die Architektur und
    die Anwendungsmöglichkeiten anhand konkreter Beispiele zu
    verdeutlichen. Sie erheben keinen Anspruch auf Vollständigkeit.
  </para>
  <sect2 id="szenario_mobile_client">
    <title>Szenario 1: Mobile Client-Anwendung</title>
    <para>
      Eine <link linkend="client">Client</link>-Anwendung für mobile
      Endgeräte wie Smartphones und Tablets, nachfolgend &quot;App&quot;
      genannt, könnte das Ziel verfolgen, Nutzern unterwegs sowie
      abseits vom Desktop-PC auf die Gegebenheiten mobiler Endgeräte
      optimierten Lesezugriff auf Dokumente aus Ratsinformationssystemen
      (RIS) zu bieten. Die möglichen Kontexte und Nutzungsmotivationen
      sind vielfältig:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          Teilnehmer einer Sitzung greifen während der Sitzung auf die
          Einladung dieser Sitzung und die zur Tagesordnung der Sitzung
          gehörenden Drucksachen zu, außerdem auf die Protokolle
          vorheriger Sitzungen.
        </para>
      </listitem>
      <listitem>
        <para>
          Eine Redakteurin der Lokalpresse geht unterwegs die Themen der
          nächsten Sitzungen bestimmter Gremien, für die sie sich
          besonders interessiert, durch.
        </para>
      </listitem>
      <listitem>
        <para>
          Eine Gruppe von Studierenden erkundet zusammen mit ihrem
          Dozenten die lokalpolitischen Aktivitäten des Viertels rund um
          ihre Hochschule. Dazu nutzen sie die GPS-Lokalisierung ihrer
          Smartphones in Verbindung mit den Geodaten, die an vielen
          Drucksachen des lokalen RIS zu finden sind. Direkt vor Ort an
          einer Baustelle öffnen sie Beschlüsse, Pläne und Eingaben aus
          dem Planfeststellungsverfahren, die dieser Baustelle voran
          gegangen sind.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Zur Realisierung derartiger Szenarien können die Fähigkeiten von
      OParl-kompatiblen Servern mit den besonderen Eigenschaften der
      mobilen Endgeräte verknüpft werden.
    </para>
    <para>
      Smartphones und Tablets verfügen beispielsweise, je nach
      Aufenthaltsort, über sehr unterschiedlich gute Internetanbindung.
      In einem Büro oder zuhause können Nutzer über ein WLAN Daten mit
      hoher Bandbreite austauschen, in Mobilfunknetzen vor allem
      außerhalb der Ballungsgebiete jedoch sinken die Bandbreiten
      deutlich. Einige Tablets werden sogar ohne Möglichkeit zur
      Mobilfunk-Datenübertragung genutzt. In solchen Fällen kann ein
      <link linkend="cache">Cache</link> auf dem Endgerät dazu dienen,
      Inhalte vorzuhalten, die dann auch bei langsamer oder fehlender
      Internetverbindung zur Verfügung stehen. Sobald dann wieder eine
      Verbindung mit hoher Bandbreite bereit steht, kann die App im
      Hintergrund, entweder über die <link linkend="feeds">Feeds</link>
      der OParl API oder über den einzelnen Abruf von Objekten, die
      gecachten Inhalte aktualisieren.
    </para>
    <para>
      Eine Stärke eines mobilen Clients ist auch die Möglichkeit der
      Personalisierung, also der Anpassung auf die Bedürfnisse und
      Interessen der Nutzerin oder des Nutzers. Es wäre beispielsweise
      denkbar, dass eine Nutzerin die Ratsinformationssysteme, für die
      sie sich interessiert, dauerhaft in der App einrichtet und eine
      Favoritenliste der Gremien, die ihre bevorzugten Themengebiete
      behandeln, hinterlegt. Die App könnte aufgrund dieser
      Favoritenliste eigenständig über die API nach neuen
      Sitzungsterminen, Tagesordnungspunkten, Drucksachen und Dokumente
      suchen. Taucht dabei ein neues Objekt auf, wird die Nutzerin
      darüber benachrichtigt. Sie kann dann beispielsweise entscheiden,
      Dokumente direkt zu öffnen oder für den späteren Offline-Zugriff
      zu speichern.
    </para>
    <para>
      Einem derartigen Szenario kommt das Graph-orientierte Datenmodell
      der OParl API entgegen. Ausgehend von einer Sitzung eines
      bestimmten Gremiums beispielsweise ist es damit einfach möglich,
      die in Verbindung stehenden Mitglieder des Gremiums, Teilnehmer
      der Sitzung, Tagesordnungspunkte der Sitzung oder Drucksachen zu
      den Tagesordnungspunkten und letztlich Dokumente zu Drucksachen
      und Sitzung abzurufen.
    </para>
    <para>
      Für die Nutzer einer mobilen Client-Anwendung könnte es sich als
      besonders hilfreich erweisen, wenn Dokumente auf dem Server in
      verschiedenen Formaten zur Verfügung gestellt werden. Denn nicht
      jedes Endgerät mit kleinem Bildaschirm bietet eine
      nutzerfreundliche Möglichkeit, beispielsweise Dokumente im weit
      verbreiteten PDF-Format darzustellen. Hier könnte schon der
      Entwickler der mobilen App Mechanismen vorsehen, die, sofern
      vorhanden, besser geeignete Formate wie z.B. HTML abrufen.
    </para>
    <para>
      Neben dem kleinen Display kann für einige mobile Endgeräte auch
      die im Vergleich zu einem zeitgemäßen Desktop-PC geringere
      CPU-Leistung eine Einschränkung darstellen. Solchen Geräten kommt
      es besonders entgegen, wenn der Server zu allen Dokumenten auch
      den reinen Textinhalt abrufbar macht, der dann beispielsweise für
      eine Volltextsuche auf dem Endgerät indexiert werden kann. So
      wiederum kann auf dem Client eine Suchfunktion realisiert werden,
      welche die OParl-API selbst nicht zur Verfügung stellt.
    </para>
    <para>
      Eine solche Suchfunktion kann auch über die reine Volltxtsuche
      hinaus gehen und über die Suche mittels Text- oder Spracheingabe
      hinaus gehen. Denn ein Client könnte von einem
      <link linkend="server">Server</link>-System, das Drucksachen mit
      Geoinformationen anbietet, diese abrufen und räumlich indexieren.
      Anhand der Position des Geräts, die mittels GPS genau bestimmt
      werden kann, könnte so der lokale Cache nach Objekten in der
      Umgebung durchsucht werden. Das Ergebnis könnte auf einer Karte
      dargestellt oder in einer Ergebnisliste angezeigt werden, die nach
      Distanz zum Objekt sortiert werden könnte.
    </para>
  </sect2>
  <sect2 id="szenario_web_portal">
    <title>Szenario 2: Integration in Web-Portal</title>
    <para>
      Web Portale bieten Nutzern unter anderem die Möglichkeit
      Anwendungen, Prozesse und Dienste zu integrieren. Die OParl API
      stellt einen solchen Dienst dar und bereitet so den Weg zu
      angereicherten Portalseiten. Informationen, die über die API
      bezogen werden, können in Portlets organisiert und visualisiert
      werden. Hierbei können
    </para>
    <orderedlist numeration="arabic">
      <listitem>
        <para>
          angemeldete Benutzer
        </para>
      </listitem>
    </orderedlist>
    <para>
      die eingegrenzten Portlet Parameter für den nächsten Besuch
      zwischen speichern, während
    </para>
    <orderedlist numeration="arabic">
      <listitem override="2">
        <para>
          anonyme Benutzer
        </para>
      </listitem>
    </orderedlist>
    <para>
      dies nicht können. In beiden Fällen können Portalnutzer das
      angezeigte Portlet nach ihren Bedürfnissen anpassen.
      Beispielsweise kann ein solches Portlet eine Liste der Gremien
      bereitstellen, aus der sich der Nutzer das interessante Gremium
      aussucht und aufgrund dieser Auswahl die Informationen zu den
      vergangenen / nächsten Sitzungsterminen im Rat, etwaiger
      Drucksachen oder Dokumenten erhält und geeignet visualisiert.
    </para>
    <para>
      Durch eine solche Integration von RIS Informationen in bestehende
      Portalsysteme (unter Umständen die kommunale Webseite selbst), ist
      es möglich Nutzern zusätzliche Informationen in der bereits
      gewohnten Umgebung zu präsentieren und den bestehenden
      Informationsgehalt und den Datenbestand aufzuwerten.
    </para>
  </sect2>
  <sect2 id="szenario_meta_suche">
    <title>Szenario 3: Meta-Suche</title>
    <para>
      Über die OParl-API können die Informationen zu Abläufen und
      Entscheidungen aus einem Ratsinformationssystem (RIS) in einem
      externen System anders aufbereitet und dargestellt werden. Bieten
      mehrere RIS eine OParl-API an, ist der Aufwand die Inhalte dieser
      weiteren Instanzen zusätzlich in dem externen System aufzubereiten
      und darzustellen vergleichsweise gering. Auf dem externen System
      werden die Inhalte unterschiedlicher RIS übergreifend durchsuchbar
      gemacht. Nutzerinnen und Nutzer dieses Angebots können in einer
      Meta-Suche über alle angeschlossenen RIS hinweg nach Ratsvorgängen
      suchen. Daraus ergeben sich unterschiedliche
      Anwendungsmöglichkeiten:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          Eine Mitarbeiterin eines regionalen Zweckverbands hat die
          Aufgabe Ratsvorgänge in den Mitgliedskommunen mit Relevanz für
          die Aufgaben des Verbandes im Blick zu behalten. Sie nutzt
          dafür ein regionales Internetportal, in dem die RIS-Inhalte
          der Mitgliedskommunen mittels OParl-Schnittstelle durchsuchbar
          sind. Um die Suche zu vereinfachen hat sie einzelne
          Schlagwörter abonniert, zu denen sie automatisch über neue
          Vorgänge informiert wird.
        </para>
      </listitem>
      <listitem>
        <para>
          Ein Einwohner eines Ballungsraums will sich über aktuelle
          Vorgänge rund um seine Mietwohnung in Stadt A, sein
          Gartengrundstück in einer Kleingartenkolonie in der
          Nachbarstadt B und seinen Arbeitsplatz in Stadt C auf dem
          laufenden halten. Dazu abonniert er im regionalen
          Meta-RIS-Portal parlamentarische Vorgänge mit räumlichem Bezug
          zu diesen drei Standorten und wird so automatisch über neue
          Aktivitäten informiert.
        </para>
      </listitem>
      <listitem>
        <para>
          Eine Landespolitikerin möchte einfacher über die politischen
          Aktivitäten ihrer Parteikollegen in den Rathäusern des
          Bundeslandes informiert werden. Dazu nutzt sie ein
          Internetportal, in dem die Informationen aus den RIS mit
          OParl-Schnittstelle im Land zusammengeführt werden. Dort hat
          sie sich Abonnements zu einzelnen Lokalpolitikern eingerichtet
          und wird automatisch über ihre Teilnahme an Gremiensitzungen
          und die Themen dieser Sitzungen informiert.
        </para>
      </listitem>
    </itemizedlist>
  </sect2>
  <sect2 id="szenario_forschung">
    <title>Szenario 4: Forschungsprojekt Themen- und
    Sprachanalyse</title>
    <para>
      In einem Forschungsprojekt sollen Pro- und Contra-Argumentationen
      bei Ratsdiskussionen zum Ausbau von Stromtrassen identifiziert
      werden. Über die Analyse in mehreren Gebietskörperschaften sollen
      die gefundenen Argumentationen zu wiederkehrenden Mustern
      verdichtet und festgestellt werden, wie diese Muster regional
      abweichen. Dazu nutzen die Mitarbeitenden des Forschungsprojektes
      die OParl-Schnittstellen der Ratsinformationssysteme von Kommunen
      entlang der geplanten überregionalen Trassen. Über diese
      einheitlichen Schnittstellen können sie relevante Beratungen,
      Drucksachen und Dateien abrufen und zum Beispiel in einem Werkzeug
      zur qualitativen Datenanalyse lokal verarbeiten.
    </para>
  </sect2>
</sect1>
<sect1 id="prinzipien-und-funktionen-des-vokabulars-und-der-api">
  <title>Prinzipien und Funktionen des Vokabulars und der API</title>
  <para>
    TODO
  </para>
  <para>
    (In diesem Kapitel werden die Zugriffsmethoden der OParl-konformen
    Schnittstelle beschrieben. Hierzu gehören alle chapter-Dateien,
    deren Nummerierung mit der Ziffer 6 beginnnt.)
  </para>
  <para>
    Stichpunkte:
  </para>
  <itemizedlist>
    <listitem>
      <para>
        Grundlage für den Zugriff auf die Schnittstelle ist das
        Hypertext Transfer Protocol (HTTP).
      </para>
    </listitem>
    <listitem>
      <para>
        Optional gzip Encoding und andere Kodierungen, wenn Client und
        Server dies unterstützen
      </para>
    </listitem>
    <listitem>
      <para>
        Das Protokoll ist zustandslos
      </para>
    </listitem>
    <listitem>
      <para>
        Authentifizierung wird nicht benötigt.
      </para>
    </listitem>
  </itemizedlist>
  <sect2 id="designprinzipien">
    <title>Designprinzipien</title>
    <sect3 id="aufbauen-auf-gängiger-praxis">
      <title>Aufbauen auf gängiger Praxis</title>
      <para>
        Grundlage für die Erarbeitung der OParl-Spezifikation in der
        vorliegenden Version ist eine Analyse der aktuell (2012 bis
        2014) in Deutschland befindlichen Ratsinformationssysteme und
        ihrer Nutzung. Erklärtes Ziel für diese Version ist es, mit
        möglichst geringem Entwicklungsaufwand auf Seite der
        Softwareanbieter und Migrationsaufwand auf Seite der Betreiber
        zu einer Bereitstellung von parlamentarischen Informationen über
        eine OParl API zu gelangen. Hierbei war es von entscheidender
        Bedeutung, dass sich die Informationsmodelle der einschlägigen
        Softwareprodukte stark ähneln. Für die OParl-Spezifikation wurde
        sozusagen ein Datenmodell als &quot;gemeinsamer Nenner&quot; auf
        Basis der gängigen Praxis beschrieben.
      </para>
    </sect3>
    <sect3 id="verbesserung-gegenüber-dem-status-quo-wo-möglich">
      <title>Verbesserung gegenüber dem Status Quo wo möglich</title>
      <para>
        Dort, wo es dem Ziel der einfachen Implementierbarkeit und der
        einfachen Migration nicht im Weg steht, erlauben sich die
        Autoren dieser Spezifikation, auch Funktionen aufzunehmen, die
        noch nicht als gängige Praxis im Bereich der
        Ratsinformationssysteme bezeichnet werden können oder welche nur
        von einzelnen Systemen unterstützt werden. Solche Funktionen
        sind dann so integriert, dass sie nicht als zwingende
        Anforderung gelten.
      </para>
      <para>
        Ein Beispiel für eine derartige Funktion ist die Abbildung von
        Geodaten im Kontext von Drucksachen
        (<literal>oparl:Paper</literal>), um beispielsweise die Lage
        eines Bauvorhabens, das in einer Beschlussvorlage behandelt
        wird, zu beschreiben. Zwar ist den Autoren nur ein einziges
        Ratsinformationssystem<footnote>
          <para>
            Das System BoRis der Stadt Bonn
            <ulink url="http://www2.bonn.de/bo_ris/ris_sql/agm_index.asp">http://www2.bonn.de/bo_ris/ris_sql/agm_index.asp</ulink>
          </para>
        </footnote> in Deutschland bekannt, das Geoinformationen - und
        zwar in Form von Punktdaten, also einer Kombination aus Längen-
        und Breitengradangaben - mit Dokumenten verknüpft. Der Vorteil
        dieser Funktion ist jedoch anhand zahlreicher
        Anwendungsszenarien belegbar. Somit ist der vorliegenden
        OParl-Spezifikation die Möglichkeit beschrieben,
        Geodaten-Objekte einzubetten.
      </para>
      <para>
        Die Angabe eines einzelnen Punktes ist dabei nur ein einfacher
        Sonderfall. Die Spezifikation erlaubt auch die Kodierung von
        mehreren Objekten, die Punkte, Linien oder Polygone
        repräsentieren können. Vgl. dazu
        <literal>oparl:Location</literal>.
      </para>
      <para>
        Auch die Ausgabe einer Nur-Text-Version im Kontext des Dokuments
        (<literal>oparl:Document</literal>), das den barrierefreien
        Zugriff auf Inhalte oder Indexierung für Volltextsuchfunktionen
        deutlich vereinfacht, ist eine Möglichkeit, die in der gängigen
        Praxis noch nicht zu finden ist. Ebenso die Möglichkeit,
        Beziehungen zwischen einzelnen Dokumenten herzustellen, um so
        von einem Dokument zu anderen Dokumenten mit identischem Inhalt,
        aber in anderen technischen Formaten zu verweisen, etwa von
        einer ODT-Datei zu einer PDF-Version.
      </para>
    </sect3>
    <sect3 id="restful">
      <title>RESTful</title>
      <para>
        Die Bezeichnung &quot;REST&quot; (für &quot;Representational
        State Transfer&quot;) wurde im Jahr 2000 von Roy Fielding
        eingeführt<footnote>
          <para>
            Fielding, Roy: Architectural Styles and the Design of
            Network-based Software Architectures,
            <ulink url="http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm">http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm</ulink>
          </para>
        </footnote>. Die Definition von Fielding reicht sehr weit und
        berührt viele Details. In der Praxis wird der Begriff häufig
        genutzt, um eine Schnittstelle zu beschreiben,
      </para>
      <itemizedlist>
        <listitem>
          <para>
            die auf WWW-Technologie aufbaut, insbesondere dem
            HTTP-Protokoll
          </para>
        </listitem>
        <listitem>
          <para>
            die darauf beruht, dass mittels URL einzelne Ressourcen oder
            Zustände vom Client abgerufen werden können.
          </para>
        </listitem>
        <listitem>
          <para>
            die zustandslos ist. Das bedeutet, die Anfrage eines Clients
            an den Server enthält alle Informationen, die notwendig
            sind, um die Anfrage zu verarbeiten. Auf dem Server wird
            kein Speicher zur Verfügung gestellt, um beispielsweise den
            Zustand einer Session zu speichern.
          </para>
        </listitem>
      </itemizedlist>
    </sect3>
    <sect3 id="selbstbeschreibungsfähigkeit">
      <title>Selbstbeschreibungsfähigkeit</title>
      <para>
        Ausgaben des Servers sollten so beschaffen sein, dass sie für
        menschliche NutzerInnen weitgehend selbsterklärend sein können.
        Dies betrifft besonders die Benennung von Objekten und
        Objekteigenschaften.
      </para>
      <para>
        Um den Kreis der Entwicklerinnen und Entwickler, die mit einer
        OParl-API arbeiten können, nicht unnötig einzuschränken, wird
        hierbei grundsätzlich auf englischsprachige Begrifflichkeiten
        gesetzt.
      </para>
    </sect3>
    <sect3 id="erweiterbarkeit">
      <title>Erweiterbarkeit</title>
      <para>
        Implementierer sollen in der Lage sein, über eine OParl-konforme
        Schnittstelle auch solche Informationen auszugeben, die nicht im
        Rahmen des OParl-Schemas abgebildet werden können. Dies bedeutet
        zum einen, dass ein System Objekttypen unterstützen und
        ausliefern darf, die nicht (oder noch nicht) im OParl Schema
        beschrieben sind. Das bedeutet auch, dass Objekttypen so um
        eigene Eigenschaften erweitert werden können, die nicht im OParl
        Schema beschrieben sind.
      </para>
      <para>
        Ein weiterer Aspekt betrifft die Abwärtskompatiblität, also die
        Kompatibilität von OParl-Clients mit zukünftigen Schnittstellen.
        So können beispielsweise zukünftige Erweiterungen des OParl
        Schemas, etwa um neue Objekttypen, genau so durchgeführt werden
        wie die Erweiterungen um herstellerspezifische Objekttypen. Ein
        Client muss diese Anteile nicht auswerten, sofern sie nicht für
        die Aufgabe des Clients relevant sind.
      </para>
      <para>
        Diese angestrebte Erweiterbarkeit wird durch weitgehend durch
        das <link linkend="jsonld">JSON-LD-Format</link> gewährleistet.
        Es erlaubt die Verflechtung von Objekttypen-Definitionen aus
        verschiedenen Schemata.
      </para>
    </sect3>
    <sect3 id="browseability_verlinkung">
      <title>Browseability/Verlinkung</title>
      <para>
        Klassische Webservice-Schnittstellen erfordern von den
        Entwicklern vollständige Kenntnis der angebotenen
        Einstiegspunkte und Zugriffsmethoden, gepaart mit sämtlichen
        unterstützten URL-Parametern, um den vollen Funktionsumfang der
        Schnittstelle ausschöpfen zu können.
      </para>
      <para>
        Parlamentarische Informationen sind weitgehend graphartig
        aufgebaut. Das bedeutet, dass Objekte häufig mit einer Vielzahl
        anderer Objekte verknüpft sind. So ist eine Person
        beispielsweise Mitglied in mehreren Gremien, das Gremium hat
        mehrere Sitzungen abgehalten und zu diesen Sitzungen gibt es
        jeweils zahlreiche Drucksachen, die ihrerseits wieder zahlreiche
        Dokumente enthalten.
      </para>
      <para>
        Eine OParl-Schnittstelle gibt jedem einzelnen Objekt eine
        eindeutige Adresse, eine URL. Somit kann die Schnittstelle den
        Verweis von einem Objekt, beispielsweise einem Gremium, auf ein
        anderes Objekt, etwa ein Mitglied des Gremiums, dadurch
        ausgeben, dass im Kontext des Gremiums die URL des Mitglieds
        ausgeben wird. Der Client kann somit ausgehend von einem
        bestimmten Objekt die anderen Objekte im System finden, indem er
        einfach den angebotenen URLs folgt. Dieses Prinzip wird auch
        &quot;Follow Your Nose&quot; genannt<footnote>
          <para>
            <ulink url="http://patterns.dataincubator.org/book/follow-your-nose.html">http://patterns.dataincubator.org/book/follow-your-nose.html</ulink>
          </para>
        </footnote>.
      </para>
    </sect3>
    <sect3 id="linked_data">
      <title>Linked Data</title>
      <para>
        Der Begriff &quot;Linked Data&quot; steht für die Beschreibung
        von Daten in einer Form, die diese über ihren ursprünglichen
        Kontext hinaus verständlich macht.<footnote>
          <para>
            vgl. Bundesministerium des Innern (Herausg.): Open
            Government Data Deutschland, Seite 433f., 2012
            <ulink url="http://www.bmi.bund.de/SharedDocs/Downloads/DE/Themen/OED_Verwaltung/ModerneVerwaltung/opengovernment.pdf">http://www.bmi.bund.de/SharedDocs/Downloads/DE/Themen/OED_Verwaltung/ModerneVerwaltung/opengovernment.pdf</ulink>
          </para>
        </footnote>
      </para>
      <para>
        Kern von Linked Data ist die Möglichkeit, alle Bestandteile von
        Daten in Form von Tripeln zu beschreiben, das sind dreiteilige
        Informationseinheiten aus einem Subjekt, einem Prädikat und
        einem Objekt. Alle drei Bestandteile können in Form global
        eindeutiger &quot;Uniform Resource Identifier&quot; (URI)
        abgebildet werden.
      </para>
      <para>
        Nach dem Linked-Data-Prinzip könnte beispielsweise der Vorname
        einer Person mit dem folgenden Tripel beschrieben werden:
      </para>
      <programlisting>
Subjekt: https://dbpedia.org/resource/John_Doe_(musician)
Prädikat: http://xmlns.com/foaf/0.1/givenName
Objekt: https://dbpedia.org/resource/John_(given_name)
</programlisting>
      <para>
        Hierbei macht man von der Tatsache Gebrauch, dass das Subjekt,
        also die Person, um die es geht, bereits mittels ihrer URI
        eindeutig identifiziert werden kann und dass bestenfalls unter
        dieser URI weitere Informationen zu der Person abrufbar sind.
        Auch für das Prädikat &quot;Person hat den Vornamen&quot; liegt
        bereits eine Beschreibung in einem gebräuchlichen Vokabular vor,
        auf das hier verwiesen werden kann. Und schließlich kann sogar
        der eigentliche Vorname in Form einer URI abgebildet werden,
        nämlich als Verweis auf eine umfangreiche Beschreibung dieses
        Namens.
      </para>
      <para>
        Auf ein für Linked Data wichtiges Detail sei hier hingewiesen.
        Wenn man in einem üblichen Web-Browser diesen oben angegebenen
        Link eingibt und aufruft:
      </para>
      <programlisting>
https://dbpedia.org/resource/John_Doe_(musician)
</programlisting>
      <para>
        dann sieht man anschliessend bei der Anzeige der HTML-Seite
        diesen Link im Adressfeld:
      </para>
      <programlisting>
https://dbpedia.org/page/John_Doe_(musician)
</programlisting>
      <para>
        Dabei identifiziert der erste Link den abstrakten Begriff des
        Musikers, während der zweite Link eine Repräsentation dieses
        Begriffs identifiziert. Ein anderer http-Client, der statt
        HTML-Seiten z.B. JSON-LD bevorzugt, würde bei Zugriff auf den
        ersten Link statt der HTML-Seite den Inhalt dieser URL erhalten:
      </para>
      <programlisting>
https://dbpedia.org/data/John_Doe_(musician).jsonld
</programlisting>
      <para>
        Dabei handelt es sich um eine Repräsentation des Musikers in
        Form von JSON-LD.
      </para>
      <para>
        Diese drei Links sind nicht nur verschieden, sondern haben
        unterschiedliche Bedeutungen. Eine Angabe z.B. der zweiten URL
        (HTML-Seite) oder der dritten URL (JSON-LD) kann von Clients
        generell nicht verwendet werden, um auf einfache Weise zu den
        anderen beiden URLs zu gelangen. Deshalb soll bei Linked Data
        der erste Link, also der des abstrakten Begriffs angegeben
        werden. Der Zugriff auf diesen Link wird
        &quot;Dereferenzierung&quot; genannt. Von dem ersten Link
        gelangt man zu den beiden anderen mittels &quot;Content
        Negotiation&quot;.
      </para>
    </sect3>
    <sect3 id="ziel">
      <title>Ziel</title>
      <para>
        Das Ziel von OParl ist es, mit der vorliegenden Version 1.0 der
        Spezifikation, die Nutzung solcher allgemeingültigen Vokabulare
        für die Veröffentlichung von parlamentarischen Informationen zu
        begünstigen und die automatisierte Verarbeitung und Verknüpfung
        von Informationen, auch über die Grenzen verschiedener
        Informationssysteme hinweg, zu erleichtern.
      </para>
      <para>
        Beispiele, wo dies sinnvoll ist, sind in der Praxis leicht zu
        finden. So finden sich beispielsweise in vielen lokalen
        Parlamenten immer wieder Fraktionen der selben Parteien,
        beispielsweise CDU und SPD. Mittels Linked Data wäre es möglich,
        jede dieser Fraktionen mit einer externen URL zu
        verknüpfen<footnote>
          <para>
            beispielsweise
            <ulink url="http://dbpedia.org/resource/Christian_Democratic_Union_(Germany)">http://dbpedia.org/resource/Christian_Democratic_Union_(Germany)</ulink>
            und
            <ulink url="http://dbpedia.org/resource/Social_Democratic_Party_of_Germany">http://dbpedia.org/resource/Social_Democratic_Party_of_Germany</ulink>
          </para>
        </footnote> und somit erkennbar zu machen, zu welcher Partei
        diese Fraktion gehört. Ebenso finden sich viele inhaltliche
        Ähnlichkeiten bei Gremien wie zum Beispiel Ausschüssen (z.B.
        Hauptausschuss, Verkehrsausschuss etc.) oder bei Arten von
        Drucksachen (z.B. Anträge, Anfragen, Mitteilungen,
        Beschlussvorlagen).
      </para>
      <para>
        OParl lässt in Version 1.0 der Spezifikation noch viele
        Aufgaben, die die Vereinheitlichung dieses Vokabulars betreffen,
        offen. Jedoch wird durch die Verwendung von
        <link linkend="jsonld">JSON-LD</link> als Serialisierungsformat
        der Grundstein für eine Vereinheitlichung im Sinne von Linked
        Data gelegt.
      </para>
    </sect3>
  </sect2>
  <sect2 id="zukunftssicherheit">
    <title>Zukunftssicherheit</title>
    <para>
      Wie unter <link linkend="designprinzipien">Designprinzipien</link>
      beschrieben, ist diese erste Version der OParl-Spezifikation
      bereits im Wesentlichen von den Zielen der einfachen
      Implementierbarkeit und Migration geleitet.
    </para>
    <para>
      Der Aufwand, den die Betreiber von parlamentarischen
      Informationssystemen bei der Bereitstellung von OParl-konformen
      Schnittstellen betreiben, soll auch bei der zukünftigen
      Weiterentwicklung dieser Spezifikation berücksichtigt werden.
      Ebenso soll den Entwicklern von Client-Software zukünftig entgegen
      kommen, dass ihre bestehenden Clients auch mit Servern
      kommunizieren können, die eine neuere Version der
      OParl-Spezifikation unterstützen. Dieser Wunsch ist bereits im
      Designprinzip
      <link linkend="erweiterbarkeit">Erweiterbarkeit</link>
      ausformuliert.
    </para>
    <para>
      Mit anderen Worten: die Autoren der OParl-Spezifikation
      beabsichtigen größtmögliche Zukunftssicherheit und zukünftige
      Abwärtskompatibilität. Dieses Ziel wird in Zukunft natürlich
      abgewägt werden müssen mit dem Wunsch, sich an Veränderungen und
      neue Erkenntnisse anzupassen. Eine Garantie für Zukunftssicherheit
      kann insofern niemand aussprechen.
    </para>
  </sect2>
  <sect2 id="content-negotiation">
    <title>Content Negotiation</title>
    <para>
      Im Abschnitt Designprinzipien wurde bereits erwähnt, dass die
      &quot;Dereferenzierung&quot; mittels Content Negotiation erfolgt.
    </para>
    <para>
      So kann der Server beim Zugriff eines Client auf
    </para>
    <para>
      https://dbpedia.org/resource/John_Doe_(musician)
    </para>
    <para>
      z.B. entweder diese URL sowie HTML-Inhalt liefern
    </para>
    <para>
      https://dbpedia.org/page/John_Doe_(musician)
    </para>
    <para>
      oder aber diese URL mit JSON-LD als Inhalt
    </para>
    <para>
      https://dbpedia.org/data/John_Doe_(musician).jsonld
    </para>
    <para>
      Die Entscheidung darüber, welche der URLs und welche der
      Inhaltsformate der Server liefert, wird zwischen Client und Server
      mittels Content Negotiation ausgehandelt.
    </para>
    <para>
      Der Vorgang ist u.a. in
      http://de.wikipedia.org/wiki/Content_Negotiation erklärt. Content
      Negotiation ist Bestandteil der HTTP 1.1 Spezifikation. Siehe RFC
      2616 (http://tools.ietf.org/html/rfc2616).
    </para>
    <para>
      Wichtig ist, dass Client und Server die Möglichkeit haben, das
      Format auszuhandeln. Deshalb müssen in OParl-Daten
      format-unspezifische URLs angegeben werden, bei dem Musiker John
      Doe ist das die erste der oben angegebenen URLs und nicht die
      letzte.
    </para>
  </sect2>
  <sect2 id="http-und-https">
    <title>HTTP und HTTPS</title>
    <para>
      OParl-Server und -Client kommunizieren miteinander über das
      HTTP-Protokoll.
    </para>
    <para>
      Hierbei SOLL eine verschlüsselte Variante des Protokolls, auch
      HTTPS genannt, zum Einsatz kommen, alternativ kann jedoch auch
      unverschlüsseltes HTTP verwendet werden. Welche
      Verschlüsselungstechnologie im Fall von HTTPS gewählt wird,
      obliegt dem Betreiber bzw. Server-Implementierer.
    </para>
    <para>
      Die Wahl des unverschlüsselten oder verschlüsselten HTTP-Zugriffs
      hat Auswirkung auf die im System verwendeten URLs. Wie im Kapitel
      <link linkend="urls">URLs</link> beschrieben, verfolgt diese
      Spezifikation die Festlegung auf genau eine &quot;kanonische&quot;
      URL je Ressource (URL-Kanonisierung).
    </para>
    <para>
      Bei unverschlüsseltem Zugriff wird allen URLs, die auf das
      betreffende System zeigen, das Schema &quot;http://&quot; voran
      gestellt, beim verschlüsselten Zugriff stattdessen
      &quot;https://&quot;.
    </para>
    <para>
      Es ist daher ZWINGEND, dass der Server-Betreiber sich zur
      URL-Kanonisierung für nur eine von beiden Varianten entscheidet.
      Beantwortet das System regulär Anfragen über HTTPS mit der
      Auslieferung von Objekten etc., dann MUSS das System bei Anfragen
      an die entsprechenden URLs ohne &quot;https://&quot; Schema mit
      einer Weiterleitung antworten (HTTP Status-Code 301).
    </para>
    <para>
      Gleiches gilt umgekehrt: beantwortet das System regulär Anfragen
      über unverschlüsseltes HTTP, dann MÜSSEN Anfragen auf die
      entsprechenden URLs mit &quot;https://&quot;-Schema mit einer
      HTTP-Weiterleitung (HTTP Status-Code 301) beantwortet werden.
      TODO: Geht das, wenn HTTPS nicht unterstützt wird?
    </para>
  </sect2>
  <sect2 id="urls-bzw.-iris">
    <title>URLs bzw. IRIs</title>
    <para>
      Internationalized Resource Identifier (IRI) sind die
      internationalisierte Form der Uniform Resource Identifier (URI).
      Diese sind in RFC 3987 spezifiziert
      (http://tools.ietf.org/html/rfc3987). In der OParl-Spezifikation
      sind grundsätzlich auch dann IRIs gemeint, wenn wie folgt die
      Bezeichnungen URI oder URL verwendet werden. Dies soll der
      Lesbarkeit dienen, auch wenn es technisch nicht ganz korrekt ist.
    </para>
    <para>
      Den URLs (für &quot;Uniform Resource Locators&quot;, auch URI für
      &quot;Uniform Resource Identifier&quot;) kommt bei einer
      OParl-konformen API eine besondere Bedeutung zu und es werden eine
      Reihe von Anforderungen an die Verarbeitung von URLs gestellt.
    </para>
    <para>
      Die grundsätzliche Funktionsweise von URLs ist in RFC3986
      beschrieben<footnote>
        <para>
          <ulink url="http://tools.ietf.org/html/rfc3986">http://tools.ietf.org/html/rfc3986</ulink>
        </para>
      </footnote>.
    </para>
    <para>
      Der Aufbau einer beispielhaften URL mit den Bezeichnungen, wie sie
      in diesem Dokument Verwendung finden:
    </para>
    <programlisting>
http://refserv.oparl.org/bodies/0/committees/4/members/?skip=234
\__/   \_______________/\_____________________________/ \______/
 |         |                  |                           |
Schema    Host               Pfad                        Query-String
</programlisting>
    <para>
      Um bereits an dieser Stelle das Entstehen von Missverständnissen
      zu vermeiden sei darauf hingewiesen, dass insbesondere auch der
      enthaltene Pfad nur ein Beipiel ist. Der Aufbau der Pfade wird in
      OParl nicht festgelegt.
    </para>
    <sect3 id="url-kanonisierung">
      <title>URL-Kanonisierung</title>
      <para>
        Absicht ist, dass jedes benannte Objekt, das ein Server über
        eine OParl-API anbietet, über genau eine URL identifizierbar und
        abrufbar ist. Diese Vereinheitlichung der URL nennen wir
        Kanonisierung.
      </para>
      <para>
        Die Kanonisierung ist entscheidend, um erkennen zu können, ob
        zwei URLs das selbe Objekt repräsentieren. Sind zwei URLs
        identisch, sollen Clients daraus ableiten können, dass diese das
        selbe Objekt repräsentieren. Sind zwei URLs unterschiedlich,
        soll im Umkehrschluss die Annahme gelten, dass sie zwei
        verschiedene Objekte repräsentieren.
      </para>
      <para>
        Der OParl-konforme Server MUSS für jedes benannte Objekt eine
        kanonische URL bestimmen können.
      </para>
      <para>
        Die URL-Kanonisierung betrifft sämtliche Bestandteile der URL.
        Entsprechend beginnt diese schon beim
        <emphasis role="strong">Schema</emphasis> und bei der
        Entscheidung durch den Betreiber, ob eine OParl-API regulär über
        HTTP oder über HTTPS erreichbar sein soll (vgl.
        <link linkend="http-und-https">HTTP und HTTPS</link>).
      </para>
      <para>
        Der <emphasis role="strong">Host</emphasis>-Teil der URL wird
        ebenfalls durch die Konfiguration des Betreibers festgelegt.
        Obwohl technisch auch die Verwendung einer IP-Adresse (z.B.
        &quot;123.123.123.123&quot;) möglich wäre, SOLL der Betreiber
        einen mit Bedacht gewählten Host-Namen einsetzen. Die Vorteile
        dieser Lösung gegenüber der Verwendung einer IP-Adresse sind
        vielfältig:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            NutzerInnen können Host-Namen lesen und interpretieren
          </para>
        </listitem>
        <listitem>
          <para>
            In Kombination mit der richtigen Domain (oder Subdomain)
            kann der Hostname kommunizieren, wer der Betreiber ist.
          </para>
        </listitem>
        <listitem>
          <para>
            Host-Namen können zwischen verschiedenen technischen
            Systemen (bzw. von IP-Adresse zu IP-Adresse) migriert
            werden, was hilft, die Langlebigkeit der URLs zu
            gewährleisten
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Eine URL wie
      </para>
      <programlisting>
http://oparl.ratsinformation.stadt-koeln.de/
</programlisting>
      <para>
        kommuniziert beispielsweise direkt die Zugehörigkeit zur Stadt
        Köln als Betreiber des Systems. Die Bezeichnung
        &quot;ratsinformation&quot; in der Subdomain zeigt den Zweck des
        Systems allgemein verständlich an. Der Host-Name
        &quot;oparl.ratsinformation.stadt-koeln.de&quot; deutet an, dass
        diese URL zu einer OParl-Schnittstelle zu diesem System gehört.
      </para>
      <para>
        Um die Kanonisierung zu gewährleisten, sind vom Betreiber alle
        notwendigen Faktoren auszuschließen, die dazu führen können,
        dass eine Ressource neben der kanonischen URL noch über andere
        URLs abrufbar ist. Diese Faktoren könnten sein:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            Der selbe Server antwortet nicht nur über den kanonischen
            Host-Namen, sondern auch noch über andere Host-Namen. Das
            könnte zum Beispiel der Fall sein, wenn der Host-Name als
            CNAME für einen anderen Namen konfiguriert wurde oder wenn
            ein DNS A-Record für die IP-Adresse des Servers existiert.
          </para>
        </listitem>
        <listitem>
          <para>
            Der Server ist neben dem Host-Namen auch über die IP-Adresse
            erreichbar.
          </para>
        </listitem>
        <listitem>
          <para>
            Zusätzliche Domains, die einen A-Record auf den selben
            Server besitzen
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Zu der kanonischen Beispiel-URL
        http://oparl.ratsinformation.stadt-koeln.de/ wären eine Reihe
        von nicht-kanonischen URL-Varianten denkbar, die technischen auf
        den selben Server führen könnten:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            http://83.123.89.102/
          </para>
        </listitem>
        <listitem>
          <para>
            http://oparl.ratsinformation.stadtkoeln.de/
          </para>
        </listitem>
        <listitem>
          <para>
            http://risserv.stadt-koeln.de/
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Falls es aus technischen Gründen nicht möglich ist, den Zugang
        auf das OParl-System über nicht-kanonische URLs zu unterbinden,
        SOLL eine entsprechende HTTP-Anfrage mit einer Weiterleitung auf
        die entsprechende kanonische URL beantwortet werden. Dabei ist
        der HTTP-Status-Code 301 zu verwenden.
      </para>
      <para>
        Server-Implementierern wird empfohlen, hierfür den Host-Header
        der HTTP-Anfrage auszuwerten und mit der konfigurierten
        Einstellung für den kanonischen Hostnamen des Systems
        abzugleichen.
      </para>
      <para>
        Beim <emphasis role="strong">Pfad</emphasis>-Bestandteil der URL
        MÜSSEN Server-Implementierer darüber hinaus beachten, dass nur
        jeweils eine Schreibweise als die kanonische Schreibweise gelten
        kann. Dazu gehört auch die Groß- und Kleinschreibung, die Anzahl
        von Schrägstrichen als Pfad-Trennzeichen, die Anzahl von
        führenden Nullen vor numerischen URL-Bestandteilen und vieles
        mehr.
      </para>
      <para>
        Die Kanonisierung umfasst auch den
        <emphasis role="strong">Query-String</emphasis>-Bestandteil der
        URL. Wie auch beim Pfad, gilt hier, dass für jeden Parameter und
        jeden Wert im Query-String nur eine kanonische Schreibweise
        gelten MUSS.
      </para>
      <para>
        Darüber hinaus SOLL der Server-Implementierer darauf achten, bei
        Verwendung von Query-String-Parametern diese in URLs immer nach
        dem selben Prinzip zu sortieren. Ein Beispiel: die beiden URLs
      </para>
      <programlisting>
http://oparl.meinris.de/members?body=1&amp;committee=2
http://oparl.meinris.de/members?committee=2&amp;body=1
</programlisting>
      <para>
        unterscheiden sich lediglich in der Reihenfolge der
        Query-String-Parameter. Da sie jedoch nicht identisch sind,
        müssen Clients annehmen, dass beide URLs verschiedene Objekte
        repräsentieren. In der Konsequenz kann es zu vermeidbarer
        Ressourcennutzugn sowohl auf Client- als auch auf Serverseite
        kommen.
      </para>
    </sect3>
    <sect3 id="langlebigkeit">
      <title>Langlebigkeit</title>
      <para>
        Weiterhin ist es Absicht, dass URLs von Objekten langlebig sind,
        so dass sie, wenn sie einmal verbreitet wurden, langfristig zur
        Abfrage des dazugehörigen Objekts verwendet werden können.
      </para>
      <para>
        Um dies zu gewährleisten, wird den
        <emphasis role="strong">Betreibern</emphasis> empfohlen, die
        Wahl der Domain, eventuell der Subdomain und letztlich des
        Host-Namens sorgfältig auf seine längerfristige Verwendbarkeit
        abzuwägen.
      </para>
      <para>
        <emphasis role="strong">Server-Implementierer</emphasis> SOLLEN
        darüber hinaus dafür sorgen, dass der Pfad-Bestandteil der URLs
        die Langlebigkeit der URLs unterstützt. Es gelten die folgenden
        Empfehlungen, die jedoch keinen Anspruch auf Vollständigkeit
        erheben:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="strong">Veränderliche Objekt-Eigenschaften
            nicht als URL-Bestandteil nutzen.</emphasis> In URLs sollten
            nur Eigenschaften des Objekts aufgenommen werden, die keinen
            Veränderungen unterliegen. Ändert sich beispielsweise die
            Kennung einer Drucksache im Verlauf ihrer Existenz, dann
            scheidet sie für die Bildung der URL aus.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="strong">Technische Eigenschaften der
            Implementierung verbergen.</emphasis> Ist ein OParl-Server
            beispielsweise in PHP implementiert, sollte dies nicht dazu
            führen, dass im Pfad ein Bestandteil wie
            &quot;oparl.php/&quot; erscheint. Erfahrungsgemäß überdauern
            solche URLs nur kurz.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Weitere Empfehlungen für langlebige URLs liefern Tim
        Berners-Lee<footnote>
          <para>
            Berners-Lee, Tim: Cool URIs don't change.
            <ulink url="http://www.w3.org/Provider/Style/URI.html">http://www.w3.org/Provider/Style/URI.html</ulink>
          </para>
        </footnote> sowie die Europäische Kommission<footnote>
          <para>
            Study on persistent URIs, with identification of best
            practices and recommendations on the topic for the MSs and
            the EC. (PDF)
            <ulink url="http://goo.gl/JaTq6Z">http://goo.gl/JaTq6Z</ulink>
          </para>
        </footnote>. TODO: goo.gl URL expandieren
      </para>
    </sect3>
  </sect2>
  <sect2 id="serialisierung-mittels-json-ld-und-jsonp">
    <title>Serialisierung mittels JSON-LD und JSONP</title>
    <para>
      Eine OParl-konforme API gibt Objekte in Form von JSON aus. Die
      Objekte werden dabei entsprechend der JSON-LD Spezifikation um
      Kontexte erweitert, welche die Selbstbschreibungsfähigkeit der
      ausgegebenen Daten verbessert. Auf Anforderung des Clients wird
      darüber hinaus JSONP unterstützt.
    </para>
    <para>
      In jedem Fall MUSS ein Server die Anfrage eines Clients unter
      Verwendung des HTTP <literal>Content-type</literal>-Headers
      <literal>application/ld+json</literal> beantworten. Die
      Spezifikation von JSON-LD liefert dazu genauere
      Informationen<footnote>
        <para>
          http://www.w3.org/TR/json-ld/#iana-considerations
        </para>
      </footnote>, auch zu dem optionalen Parameter
      <literal>profile</literal> für die explizite Anforderung von
      JSON-LD in einer dieser drei Unterformen: kompakt, expandiert oder
      flach.
    </para>
    <para>
      Wenn der Server auch Anfragen nach
      <literal>application/json</literal> akzeptiert, dann SOLL er
      expandierte JSON-LD Dokumente liefern (also solche ohne
      <literal>@context</literal>). TODO: MUSS der Server solche
      Legacy-Anfragen akzeptieren? Warum?
    </para>
    <sect3 id="json">
      <title>JSON</title>
      <para>
        Die Abkürzung JSON steht für &quot;JavaScript Object
        Notation&quot;. Das JSON-Format ist in RFC4627<footnote>
          <para>
            <ulink url="https://tools.ietf.org/html/rfc4627">https://tools.ietf.org/html/rfc4627</ulink>
          </para>
        </footnote> beschrieben. Nachfolgend werden nur die wichtigsten
        Definitionen übernommen, um eine Terminologie zur weiteren
        Verwendung in diesem Dokument zu etablieren.
      </para>
      <para>
        Das JSON-Format unterstützt die Ausgabe von vier verschiedenen
        primitiven Datentypen:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <emphasis>Zeichenkette</emphasis> (Unicode)
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>Zahl</emphasis> (sowohl Ganzzahlen als auch
            Fließkommazahlen)
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>Wahrheitswert</emphasis> (<literal>true</literal>
            oder <literal>false</literal>)
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>Null</emphasis>
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Darüber hinaus werden zwei komplexe Datentypen unterstützt:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <emphasis>Objekt</emphasis>: Eine Sammlung von
            Schlüssel-Wert-Paaren ohne Reihenfolge, wobei der Schlüssel
            eine Zeichenkette sein muss und der Wert ein beliebiger
            Datentyp sein kann.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>Array</emphasis>: Eine geordnete Liste mit
            beliebigen Datentypen.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Beispiel eines Objekts in JSON-Notation:
      </para>
      <programlisting language="json">
{
    &quot;zeichenkette&quot;: &quot;Das ist eine Zeichenkette&quot;,
    &quot;zahl&quot;: 1.23456789,
    &quot;wahrheitswert&quot;: true,
    &quot;null&quot;: null,
    &quot;objekt&quot;: {
        &quot;foo&quot;: &quot;bar&quot;
    },
    &quot;array&quot;: [&quot;foo&quot;, &quot;bar&quot;]
}
</programlisting>
    </sect3>
    <sect3 id="jsonld">
      <title>JSON-LD</title>
      <para>
        Das Kürzel LD im Namen &quot;JSON-LD&quot; steht für
        &quot;Linked Data&quot;<footnote>
          <para>
            siehe dazu <link linkend="linked_data">Linked Data</link>
          </para>
        </footnote>. Entsprechend erweitert die
        JSON-LD-Spezifikation<footnote>
          <para>
            <ulink url="http://www.w3.org/TR/json-ld/">http://www.w3.org/TR/json-ld/</ulink>
          </para>
        </footnote> das JSON-Format um die Möglichkeit,
      </para>
      <itemizedlist>
        <listitem>
          <para>
            Objekte mit anderen Objekten zu verknüpfen,
          </para>
        </listitem>
        <listitem>
          <para>
            Objekte und Eigenschaften bestimmten Typen zuzuordnen und
            damit
          </para>
        </listitem>
        <listitem>
          <para>
            Auskunft über die semantische Bedeutung von Objekten und
            Eigenschaften zu geben.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Ein Beispiel aus der JSON-LD-Spezifikation illustriert, wie
        JSON-LD ein Objekt um zusätzliche semantische Informationen
        erweitert. Als Ausgangspunkt dient eine Personenbeschreibung in
        gewöhnlichem JSON:
      </para>
      <programlisting language="json">
{
  &quot;name&quot;: &quot;Manu Sporny&quot;,
  &quot;homepage&quot;: &quot;http://manu.sporny.org/&quot;,
  &quot;image&quot;: &quot;http://manu.sporny.org/images/manu.png&quot;
}
</programlisting>
      <para>
        Als menschlicher Betrachter kann man leicht erkennen, dass die
        Eigenschaft <literal>name</literal> den Namen der Person
        enthält, dass <literal>homepage</literal> die Website der Person
        sein könnte und dass <literal>image</literal> die URL einer
        Bilddatei der Person sein könnte. Ein automatisierter Client
        jedoch, dem die Objekteigenschaften nicht bekannt sind, kann die
        Bedeutung dieser Eigenschaften nicht entschlüsseln.
      </para>
      <para>
        Entsprechend der JSON-LD-Spezifikation kann diese Erläuterung
        über die <literal>@context</literal>-Eigenschaft direkt im
        selben Objekt, sozusagen als Unterobjekt, mitgeliefert werden:
      </para>
      <programlisting language="json">
{
  &quot;@context&quot;:
  {
    &quot;name&quot;: &quot;http://xmlns.com/foaf/0.1/name&quot;,
    &quot;image&quot;: {
      &quot;@id&quot;: &quot;http://xmlns.com/foaf/0.1/img&quot;,
      &quot;@type&quot;: &quot;@id&quot;
    },
    &quot;homepage&quot;: {
      &quot;@id&quot;: &quot;http://xmlns.com/foaf/0.1/homepage&quot;,
      &quot;@type&quot;: &quot;@id&quot;
    }
  },
  &quot;name&quot;: &quot;Manu Sporny&quot;,
  &quot;homepage&quot;: &quot;http://manu.sporny.org/&quot;,
  &quot;image&quot;: &quot;http://manu.sporny.org/images/manu.png&quot;
}
</programlisting>
      <para>
        Hier sind die Eigenschaften wie <literal>image</literal> einer
        URL wie http://schema.org/image zugewiesen. Ein Client, der
        diese URL kennt, kann daraus folgern, dass über die
        Objekteigenschaft <literal>image</literal> immer die URL eines
        Bildes zu finden ist. Das Schlüssel-Wert-Paar
      </para>
      <programlisting>
&quot;@type&quot;: &quot;@id&quot;
</programlisting>
      <para>
        sagt darüber hinaus aus, dass der Wert dieser Eigenschaft die
        URL eines anderen Objekts ist<footnote>
          <para>
            URLs heißen in der JSON-LD-Spezifikation &quot;IRI&quot;
            (für &quot;Internationalized Resource Identifier&quot;), wir
            verwenden hier jedoch weiterhin die Bezeichnung
            &quot;URL&quot;.
          </para>
        </footnote>. Mittels <literal>@type</literal>-Deklaration könnte
        aber auch beispielsweise eine Eigenschaft, die im JSON-Sinn eine
        Zeichenkette ist, als Datum deklariert werden.
      </para>
      <para>
        Am obigen Beispiel fällt auf, dass der
        <literal>@context</literal>-Teil des Objekts schon mehr Daten
        umfasst, als die eigentlichen Objekteigenschaften.
        Sinnvollerweise kann jedoch der gesamte Inhalt des
        <literal>@context</literal>-Teils in eine externe Ressource
        ausgelagert werden. Das folgende Beispiel verdeutlicht dies:
      </para>
      <programlisting language="json">
{
  &quot;@context&quot;: &quot;http://json-ld.org/contexts/person.jsonld&quot;,
  &quot;name&quot;: &quot;Manu Sporny&quot;,
  &quot;homepage&quot;: &quot;http://manu.sporny.org/&quot;,
  &quot;image&quot;: &quot;http://manu.sporny.org/images/manu.png&quot;
}
</programlisting>
      <para>
        Die <literal>@context</literal>-Eigenschaft hat nun als Wert
        eine URL. Die URL (hier:
        http://json-ld.org/contexts/person.jsonld) gibt wiederum in JSON
        kodiert die Beschreibung aller möglichen Attribute des Objekts
        aus. Die Kontext-Beschreibung des JSON-LD-Objekts wurde somit in
        eine externe Ressource ausgelagert. Clients SOLLEN davon
        ausgehen, dass sich diese externen Kontextbeschreibungen nur
        selten ändern. Somit genügt es, bei Abruf vieler gleichartiger
        JSON-LD-Objekte vom Server die Kontext-Ressource nur einmal zu
        laden.
      </para>
      <para>
        Im Sinne der JSON-LD-Spezifikation sind Objekte mit
        eingebettetem und externem Kontext identisch. Den
        Implementierern eines OParl-konformen Servers wird EMPFOHLEN,
        grundsätzlich die Kontextinformation mittels externer Ressourcen
        zu übermitteln. Die OParl Autoren werden hierzu die zu dieser
        Spezifikation passenden Ressourcen auf oparl.org für jegliche
        Verwendung zur Verfügung stellen (mehr dazu im
        <link linkend="jsonld_ressourcen_oparlorg">Anhang</link>).
        Sollten Server-Implementierer zusätzliche Objekttypen benötigen,
        die nicht von dieser Spezifikation abgedeckt sind, SOLL
        entsprechend zusätzlich auf eigene Kontextressourcen unter
        geeigneten URLs verwiesen werden. Hierbei können
        herstellereigene und OParl-spezifische URls gemischt werden, wie
        in einem Beispiel weiter unten verfeutlicht wird.
      </para>
      <para>
        JSON-LD ermöglicht es auch, für ein Objekt einen
        <emphasis role="strong">Objekttyp</emphasis> zu kommunizieren.
        So könnte passend zu unserem Beispiel ausgedrückt werden, um
        welche Art von Objekt es sich bei den vorliegenden Daten
        handelt. Dazu wird die <literal>@type</literal>-Eigenschaft
        verwendet, deren Wert eine URL ist:
      </para>
      <programlisting language="json">
{
  &quot;@context&quot;: &quot;http://json-ld.org/contexts/person.jsonld&quot;,
  &quot;@type&quot;: &quot;http://schema.org/Person&quot;,
  &quot;name&quot;: &quot;Manu Sporny&quot;,
  &quot;homepage&quot;: &quot;http://manu.sporny.org/&quot;,
  &quot;image&quot;: &quot;http://manu.sporny.org/images/manu.png&quot;
}
</programlisting>
      <para>
        Objekte können mehreren Typen zugeordnet sein und damit die
        Eigenschafen mehrerer Objekttypen nutzen. Im Fall von OParl kann
        diese Möglichkeit genutzt werden, um über die API Eigenschaften
        auszugeben, die nicht Teil des OParl-Schemas sind.
      </para>
      <programlisting language="json">
{
  &quot;@context&quot;: {
    &quot;oparl&quot;: &quot;http://oparl.org/schema/1.0/&quot;,
    &quot;vendor&quot;: &quot;http://www.vendor.de/oparl/schema/&quot;
  },
  &quot;@type&quot;: [&quot;oparl:Paper&quot;, &quot;vendor:Drucksache&quot;],
  &quot;title&quot;: &quot;Beschlussvorlage zum Haushalt&quot;,
  &quot;created&quot;: &quot;2013-05-29T14:17:39+02:00&quot;,
  &quot;aktenzeichen&quot;: &quot;ABC123&quot;
}
</programlisting>
      <para>
        Das Beispiel oben zeigt ein Objekt, das über die
        <literal>@context</literal>-Eigenschaft zwei verschiedene URLs
        als sogenannte Vokabulare referenziert. Das eine Vokabular wird
        durch das Namensraum-Präfix <literal>oparl</literal>
        repräsentiert, das zweite (herstellereigene) durch das
        Namensraum-Präfix <literal>vendor</literal>.
      </para>
      <para>
        Durch das Schlüsselwort <literal>@type</literal> wird nun dem
        Objekt ein oder mehrere Objekttypen zugewiesen. Dabei werden die
        zuvor beschriebenen Namensraum-Präfixe genutzt. Ein
        JSON-LD-Client verarbeitet Namensraum-Präfixe und
        Typenbezeichnung so, dass diese letztlich für jeden Objekttypen
        eine eindeutige URL ergeben.
      </para>
      <itemizedlist>
        <listitem>
          <para>
            Aus <literal>oparl:Paper</literal> wird
            <literal>http://oparl.org/schema/1.0/Paper</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            Aus <literal>vendor:Drucksache</literal> wird
            <literal>http://www.vendor.de/oparl/schema/Drucksache</literal>
          </para>
        </listitem>
      </itemizedlist>
      <para>
        TODO: Eventuell hier die Anforderung festhalten, dass jedes
        Objekt, das über eine OParl API ausgegeben wird, das
        <literal>@type</literal>-Schlüsselwort haben MUSS. Das ist noch
        nicht geklärt, da Listen hier eine Ausnahme bilden können.
      </para>
      <para>
        Eine JSON-LD-konforme Ausgabe stellt noch weitere Anforderungen,
        von denen nachfolgend die wichtigsten zusammen gefasst werden.
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="strong">Schlüssel müssen einzigartig
            sein</emphasis>: Es ist nicht zulässig, in einem
            JSON-LD-Objekt mehrmals den selben Schlüssel für ein
            Attribut zu verwenden.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="strong">Groß- und Kleinschreibung werden
            unterschieden</emphasis>: Groß- und Kleinschreibung sind bei
            allen Bestandteilen eines JSON-LD-Dokuments zu beachten,
            also auch bei den Attributnamen.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="strong">Listen gelten grundsätzlich als
            nicht sortiert</emphasis>: Die JSON-Spezifikation geht bei
            Listen grundsätzlich davon aus, dass diese eine Sortierung
            besitzen. Im Unterschied dazu gilt für JSON-LD, dass die
            Reihenfolge der Werte zwischen zwei eckigen Klammern
            <literal>[</literal> und <literal>]</literal> als zufällig
            gilt, sofern nicht anders spezifiziert. Wer einen
            JSON-LD-Objekttyp spezifiziert, kann jedoch mittels des
            Schlüsselwortes <literal>@list</literal> kennzeichnen, dass
            es sich hierbei um eine sortierte Liste handelt.
          </para>
          <para>
            Wo immer die OParl-Spezifikation eine stabile, nicht
            zufällige Sortierung von Listen erwartet, wird dies eigens
            erwähnt werden. Das OParl-JSON-LD-Vokabular wird an der
            entsprechenden Stelle das Schlüsselwort
            <literal>@list</literal> verwenden.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="strong">Verschachtelte Listen sind nicht
            möglich</emphasis>: JSON-LD erlaubt keine Listen, die
            wiederum Listen als Werte enthalten. TODO:
            <ulink url="https://github.com/OParl/specs/issues/115">Issue
            115</ulink>.
          </para>
        </listitem>
      </itemizedlist>
    </sect3>
    <sect3 id="jsonp">
      <title>JSONP</title>
      <para>
        Eine Einschränkung bei der Nutzung von JSON ist das
        Sicherheitsmodell von Web-Browsern. Die gängigen Browser
        erlauben es innerhalb von Webanwendungen nicht, JSON-Ressourcen
        von Domains auszulesen, die nicht der Domain entsprechen, von
        der die Webanwendung selbst geladen wurde.
        AnwendungsentwicklerInnen sind dadurch bei der Implementierung
        von Client-Anwendungen eingeschränkt.
      </para>
      <para>
        Diese Einschränkung gilt nicht fürt JSONP<footnote>
          <para>
            TODO: URL zur Spezifikation
          </para>
        </footnote>. Durch JSONP (TODO: Abkürzung erläutern) wird die
        JSON-Notation so erweitert, dass der ausgegebene Code
        ausführbarer JavaScript-Code wird. Damit wird erreicht, dass der
        JSON-Code über die Grenzen von Domains hinweg direkt von
        Webanwendungen eingebunden werden kann.
      </para>
      <para>
        Das folgende Beispiel verdeutlicht den Unterschied zwischen JSON
        und JSONP. Zunächst ein einfaches JSON-Beispiel:
      </para>
      <programlisting language="json">
{
    &quot;foo&quot;: &quot;bar&quot;
}
</programlisting>
      <para>
        Durch Einbettung in eine sogenannte Callback-Funktion wird
        daraus JSONP:
      </para>
      <programlisting language="json">
mycallback({
    &quot;foo&quot;: &quot;bar&quot;
})
</programlisting>
      <para>
        Der Name der Callback-Funktion (im Beispiel
        &quot;mycallback&quot;) wird grundsätzlich bei der Anfrage vom
        Client bestimmt, und zwar mittels URL-Parameter.
      </para>
      <para>
        Für eine OParl-konforme Schnittstelle wird EMPFOHLEN, dass der
        Server die JSONP-Ausgabe unterstützt. Die JSONP-Ausgabe MUSS in
        diesem Fall für sämtliche Abfragen möglich sein. Eine
        JSONP-Unterstzung nur für bestimmte Anfragen ist nicht
        vorgesehen.
      </para>
      <para>
        Der URL-Parameter, den Clients zur Aktivierung der JSONP-Ausgabe
        verwenden, MUSS <literal>callback</literal> lauten. Der Wert des
        <literal>callback</literal>-URL-Parameters MUSS vom Server
        unverändert als Callback-Funktionsname verwendet werden.
      </para>
      <para>
        Aus Sicherheitsgründen MUSS der Client den Wert des
        <literal>callback</literal>-Parameters aus einem eingeschränkten
        Zeichenvorrat bilden, erlaubt sind ausschließlich die Klein- und
        Großbuchstaben von a bis z bzw. A bis Z sowie die Ziffern von 0
        bis 9.
      </para>
      <para>
        Hält sich der Client nicht an diese Einschränkung und wird ein
        <literal>callback</literal>-Parameter mit nicht erlaubten
        Zeichen verwendet, SOLL der Server die Anfrage mit einer HTTP
        XXX (Bad Request) Antwort bedienen. (TODO: Status Code einfügen
        oder prüfen, welche HTTP-Antwort die geeignetste ist.)
      </para>
      <itemizedlist>
        <listitem>
          <para>
            TODO: Spezifikation finden/verlinken. (RFC gibt es nicht)
          </para>
        </listitem>
        <listitem>
          <para>
            https://github.com/OParl/specs/issues/67
          </para>
        </listitem>
      </itemizedlist>
    </sect3>
  </sect2>
  <sect2 id="benannte-und-anonyme-objekte">
    <title>Benannte und anonyme Objekte</title>
    <para>
      Die JSON-LD-Spezifikation unterscheidet zwischen benannten und
      anonymen Objekten. Da die Unterscheidung auch für OParl von
      Bedeutung ist, wird sie hier genauer erläutert.
    </para>
    <sect3 id="benannte-objekte">
      <title>Benannte Objekte</title>
      <para>
        Benannte Objekte sind innerhalb einer JSON-LD-Ausgabe diejenigen
        Objekte, die durch eine eigene URL identifiziert werden. Als
        Beispiel dient ein fiktives Objekt, das ein Client über die URL
      </para>
      <programlisting>
http://refserv.oparl.org/bodies/0/committees/1
</programlisting>
      <para>
        abruft:
      </para>
      <programlisting language="json">
{
    &quot;@id&quot;: &quot;http://refserv.oparl.org/bodies/0/committees/1&quot;,
    &quot;@type&quot;: &quot;http://oparl.org/schema/1.0/committee&quot;,
    &quot;name&quot;: &quot;Hauptausschuss&quot;
}
</programlisting>
      <para>
        Das Objekt enthält eine Eigenschaft <literal>@id</literal> mit
        der URL des Objekts als Wert.
      </para>
      <para>
        Das benannte Objekt kann über seine URL sowohl eindeutig
        identifiziert als auch direkt abgerufen werden.
      </para>
    </sect3>
    <sect3 id="anonyme-objekte-blank-nodes">
      <title>Anonyme Objekte (Blank Nodes)</title>
      <para>
        Im Gegensatz dazu können Objekte existieren, die keine eigene
        URL haben.
      </para>
      <para>
        Wenn diese im Semantic Web verwendet werden, dann führen sie zu
        erheblichen Problemen. Sandro Hawke (W3C) hat diese so
        zusammengefasst:
      </para>
      <blockquote>
        <para>
          In general, blank nodes are a convenience for the content
          provider and a burden on the content consumer. Higher quality
          data feeds use fewer blank nodes, or none. Instead, they have
          a clear concept of identity and service for every entity in
          their data.
        </para>
      </blockquote>
      <blockquote>
        <para>
          If someone in the middle tries to convert (Skolemize) blank
          nodes, it’s a large burden on them. Specifically, they should
          provide web service for those new URIs, and if they get
          updated data from their sources, they’re going to have a very
          hard [perhaps impossible] time understanding what really
          changed. (Zitiert nach
          http://richard.cyganiak.de/blog/2011/03/blank-nodes-considered-harmful/)
        </para>
      </blockquote>
      <para>
        Ein Beispiel dafür findet sich in der Beratungsfolge einer
        Drucksache. Das nachfolgende Beispiel zeigt eine Drucksache,
        deren Beratungsfolge über die Eigenschaft
        <literal>consultations</literal> kodiert ist.
      </para>
      <para>
        TODO: Nachstehendes Beispiel und Text dazu auf stimmiges Paper
        Objekt umschreiben.
      </para>
      <programlisting language="json">
{
    &quot;@id&quot;: &quot;http://refserv.oparl.org/bodies/0/papers/456&quot;,
    &quot;@type&quot;: &quot;http://oparl.org/schema/1.0/paper&quot;,
    &quot;title&quot;: &quot;Beschlussvorlage zur Jugendförderung&quot;,
    &quot;consultations&quot;: [
        {
            &quot;@type&quot;: &quot;http://oparl.org/schema/1.0/consultation&quot;,
            &quot;committee&quot;: &quot;http://refserv.oparl.org/bodies/0/committees/1&quot;,
            &quot;meeting&quot;: &quot;http://refserv.oparl.org/bodies/0/committees/1/meetings/123&quot;,
            &quot;agendaitem&quot;: &quot;7.2.4&quot;,
            &quot;authoritative&quot;: false
        },
        {
            ...
        }
    ]
}
</programlisting>
      <para>
        Die Eigenschaft <literal>consultations</literal> ist eine Liste
        mit einem oder mehreren Objekten vom Typ
        <literal>consultation</literal>. Diese Objekte spiegeln wieder,
        in welchen Sitzungen die vorliegende Drucksache beraten wurde
        bzw. wird.
      </para>
      <para>
        Die einzelnen <literal>consultation</literal>-Objekte haben
        keine <literal>@id</literal>-Eigenschaft, daher handelt es sich
        dabei um anonyme Objekte, auch <emphasis>Blank Nodes</emphasis>
        genannt. Diese Objekte können nicht einzeln, sondern nur im
        Kontext verbundener Objekte, wie hier im Beispiel im Kontext
        einer Drucksache, abgerufen werden.
      </para>
      <para>
        TODO: Weitere Objekttypen nennen, in denen Blank Nodes
        vorkommen.
      </para>
    </sect3>
  </sect2>
  <sect2 id="objektlisten">
    <title>Objektlisten</title>
    <para>
      Über die OParl-API können entweder einzelne (benannte) Objekte,
      beispielsweise eine bestimmte Drucksache, oder Listen von
      Objekten, etwa die Liste aller Sitzungen einer Körperschaft,
      abgefragt werden.
    </para>
    <para>
      Fragt ein Client eine Liste von Objekten an, hat der Server
      mehrere Möglichkeiten, diese Anfrage zu beantworten.
    </para>
    <para>
      In jedem Fall werden die einzelnen Objekte, die Bestandteile der
      Liste sind (wie z.B. die einzelnen Drucksachen) durch die URL des
      jeweiligen Objekts repräsentiert. Objektlisten sind also
      tatsächlich immer Listen von URLs.
    </para>
    <sect3 id="vollständige-listenausgabe">
      <title>Vollständige Listenausgabe</title>
      <para>
        In der einfachsten Form gibt der Server die Liste als Objekt mit
        nur einer einzigen Eigenschaft <literal>items</literal> aus. Der
        Wert dieser Eigenschaft ist die
        <emphasis role="strong">vollständige Liste</emphasis> der URLs
        aller in der Liste enthaltenen Objekte.
      </para>
      <para>
        Diese einfachste Form der Antwort eignet sich nur für Listen mit
        einer begrenzten Anzahl von Einträgen, wie beispielsweise die
        Liste der Mitglieder einer Organisation.
      </para>
      <para>
        Beispiel:
      </para>
      <programlisting language="json">
{
    &quot;items&quot;: [
        &quot;http://refserv.oparl.org/bodies/0/papers/2&quot;,
        &quot;http://refserv.oparl.org/bodies/0/papers/5&quot;,
        &quot;http://refserv.oparl.org/bodies/0/papers/7&quot;,
    ]
}
</programlisting>
    </sect3>
    <sect3 id="paginierung">
      <title>Paginierung</title>
      <para>
        Für längere Listen ist eine Blätterfunktion bzw. Paginierung
        vorgesehen. Darunter versteht man die Aufteilung der Liste in
        kleinere Teilbereiche, die wir hier als &quot;Listenseiten&quot;
        bezeichnen. Zweck ist, die einzelnen Listenseiten mit je einer
        eigenen API-Anfrage abrufbar zu machen. Die Aufteilung der Liste
        in Listenseiten erfolgt durch den Server und kann vom Client
        nicht beeinflusst werden, sie bleibt jedoch zwischen den
        einzelnen unverändert.
      </para>
      <para>
        Listen mit mehr als 100 Einträgen SOLL der Server nur teilweise
        ausgeben und dem Client dabei eine
        <emphasis role="strong">Paginierung</emphasis> anbieten, um
        weitere Listenteile abzurufen. Dabei wird EMPFOHLEN, die Zahl
        der jeweils ausgegebenen Listeneinträge wiederum auf maximal 100
        zu begrenzen.
      </para>
      <para>
        Das nachstehende Beispiel zeigt, wie dem Client die URL zum
        &quot;Blättern&quot;, also zum Aufruf der jeweils nächsten
        Listenseite, angeboten wird.
      </para>
      <programlisting language="json">
{
    &quot;items&quot;: [
        &quot;http://refserv.oparl.org/bodies/0/papers/2&quot;,
        &quot;http://refserv.oparl.org/bodies/0/papers/5&quot;,
        &quot;http://refserv.oparl.org/bodies/0/papers/7&quot;,
    ],
    &quot;nextPage&quot;: &quot;http://refserv.oparl.org/bodies/0/papers/?skip=7&quot;,
    &quot;count&quot;: 118
}
</programlisting>
      <para>
        Wie oben zu sehen, enthält das Beispiel-Objekt nun eine
        zusätzliche Eigenschaft <literal>nextPage</literal>. Der Wert
        dieser Eigenschaft ist eine URL, die dem Client dazu dient, die
        weiteren Einträge der Liste abzurufen.
      </para>
      <para>
        Die Eigenschaft <literal>count</literal> DARF bei Listen
        grundsätzlich ausgegeben werden und SOLL bei mehrseitigen Listen
        ausgegeben werden. Ihr Wert ist eine Zahl und gibt an, wie viele
        Einträge die vollständige Liste aller Objekte enthält.
      </para>
      <para>
        Ruft der Client die unter <literal>nextPage</literal> angegebene
        URL auf, erhält er wiederum ein Listenobjekt. Dieses Objekt
        MUSS, sofern noch immer mehr Listeneinträge vorhanden sind, als
        ausgegeben wurden, wiederum die <literal>nextPage</literal>
        Eigenschaft mit einer URL enthalten. Um alle Einträge einer
        Liste zu erfassen, folgt der Client also jeweils der URL, die in
        der <literal>nextpage</literal> Eigenschaft angegeben ist.
      </para>
      <figure>
        <title>Paginierung: Schematische Darstellung</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/pagination01.png" />
          </imageobject>
          <textobject><phrase>Paginierung: Schematische
          Darstellung</phrase></textobject>
        </mediaobject>
      </figure>
      <para>
        Server-Implementierer entscheiden selbst, wie die
        <literal>nextPage</literal>-URL aufgebaut ist und tragen damit
        selbst Verantwortung für die Funktionsweise der Paginierung. Bei
        der Entscheidung für eine Form der Implementierung sind weitere
        Anforderungen zu berücksichtigen:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            Es ist davon auszugehen, dass Clients für den gesamten Abruf
            aller Seiten einer Liste längere Zeit benötigen. In der
            Zwischenzeit kann sich der Inhalt der Liste bereits ändern,
            etwa durch das Hinzukommen neuer Einträge. Die Paginierung
            ist so zu implementieren, dass sich das Hinzukommen oder
            Entfernen von Einträgen möglichst nicht auf einen Client
            auswirkt, der aktuell die Liste paginiert, um alle Einträge
            abzurufen.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Eine ungünstige (unstabile) Form der Implementierung soll hier
        mit Hilfe einer SQL-Abfrage illustriert werden. Gegeben sei eine
        Tabelle <literal>example</literal>, die einen numerischen
        Primärschlüssel <literal>id</literal> enthält. Nehmen wir an,
        die erste Seite der Liste wird mit der Abfrage
      </para>
      <programlisting language="sql">
SELECT * FROM example ORDER BY id LIMIT 10 OFFSET 0
</programlisting>
      <para>
        abgerufen und würde 10 Datensätze mit den <literal>id</literal>s
        1 bis 10 zurück liefern. Dann wird die zweite Seite mit der
        Abfrage
      </para>
      <programlisting language="sql">
SELECT * FROM example ORDER BY id LIMIT 10 OFFSET 10
</programlisting>
      <para>
        abgerufen. Sofern sich an der Tabelle zwischen den beiden
        Abfragen nichts geändert hat, liefert die zweite Abfrage
        Datensätze mit <literal>id</literal> &gt; 10 aus. Sollte
        zwischen den beiden Abfragen jedoch beispielsweise der
        Datensätze mit der <literal>id</literal> 1 gelöscht worden sein,
        liefert die zweite Abfrage Datensätze mit <literal>id</literal>
        &gt; 9. In diesem Fall würde dies nur dazu führen, dass ein
        Datensatz (<literal>id</literal> = 10) zweimal ausgegeben wird.
        Bei ungünstigeren Konstellationen wäre auch denkbar, dass eine
        instabile Paginierung bewirkt, dass einzelne Datensätze beim
        Paginieren übergangen werden.
      </para>
      <para>
        Besser wäre es, bei der Paginierung die Eintragsgrenze, bei der
        eine Listenseite beginnen soll, explizit zu benennen. Wurden auf
        der ersten Listenseite die Datensätze mit den
        <literal>id</literal>s 1 bis 10 ausgegeben, so könnte der
        Folgeaufruf, um beim SQL-Beispiel zu bleiben, so aussehen:
      </para>
      <programlisting language="sql">
SELECT * FROM example WHERE id &gt; 10 ORDER BY id LIMIT 10
</programlisting>
      <para>
        TODO: Bestimmte Listen können mit Einschränkung auf einen
        Datumsbereich abgefragt werden. Mehr dazu in
        https://github.com/OParl/specs/issues/30 Fraglich ist, ob das in
        diesem Kapitel behandelt werden sollte oder in einem anderen.
      </para>
    </sect3>
    <sect3 id="listen-als-eigenschaften-von-objekten">
      <title>Listen als Eigenschaften von Objekten</title>
      <para>
        TODO: Listen können auch als Werte von Objekteigenschaften
        auftreten. Hierbei gibt es keine Paginierung, sondern es müssen
        alle URLs aufgelistet werden. Das ist auszuformulieren und mit
        Beispielen zu zeigen.
      </para>
    </sect3>
  </sect2>
  <sect2 id="feeds">
    <title>Feeds</title>
    <para>
      Feeds sind spezielle Arten von
      <link linkend="objektlisten">Objektlisten</link>, für die
      besondere Anforderungen gelten. Es werden drei verschiedene Feeds
      spezifiziert.
    </para>
    <para>
      Der Begriff &quot;Feed&quot; ist eine Anlehnung an die weit
      verbreiteten RSS- oder Atom-Feeds, deren Publikationslogik im
      Wesentlichen auf der chronologischen Sortierung beruht. Im
      Unterschied zu Atom oder RSS ist hier jedoch keine XML-Ausgabe
      beabsichtigt.
    </para>
    <para>
      Die Feeds sollen es Clients ermöglichen, schnelle und
      ressourcenschonende abzufragen, welche Objekte auf dem Server neu
      hinzugefügt, geändert oder entfernt wurden. Ziel ist, zu
      verhindern, dass Clients zur Aktualisierung ihres Caches den
      gesamten Datenbestand eines Servers abrufen müssen.
    </para>
    <para>
      Ein OParl-Server SOLL jeden der nachfolgend beschriebenen Feeds
      anbieten, sofern möglich.
    </para>
    <para>
      Für alle Feeds drei gilt, dass mindestens ein Zeitraum von 365
      Tagen, gerechnet vom Zeitpunkt der Abfrage, abgedeckt werden SOLL.
    </para>
    <sect3 id="feed_neue_objekte">
      <title>Der Feed &quot;Neue Objekte&quot;</title>
      <para>
        Der Feed für neue Objekte listet die URLs neu hinzugekommener
        Objekte in der Reihenfolge des Datums ihrer Erstellung, wobei
        die jüngsten Objekte zuerst ausgegeben werden.
      </para>
      <para>
        Die Definition, was ein &quot;neues&quot; Objekt bzw. die
        &quot;Erstellung&quot; bedeutet, kann zwischen Systemen und
        Objekttypen variieren. So werden bestimmte Objekte in einigen
        Systemen zunächst erstellt und erst dann für die Öffentlichkeit
        freigegeben. In diesem Fall ist im Sinne dieses Feeds die
        Freigabe als Zeitpunkt der Erstellung zu verwenden.
      </para>
      <para>
        Der Feed SOLL sämtliche Objekttypen umfassen, die in einem
        System geführt werden.
      </para>
      <para>
        Das nachstehende Beispiel zeigt die mögliche Ausgabe des Feeds:
      </para>
      <programlisting language="json">
{
    &quot;items&quot;: [
        {
            &quot;@id&quot;: &quot;http://refserv.oparl.org/bodies/0/papers/21/documents/3&quot;,
            &quot;created&quot;: &quot;2014-01-07T12:59:01.038+0100&quot;
        },
        {
            &quot;@id&quot;: &quot;http://refserv.oparl.org/bodies/0/papers/21&quot;,
            &quot;created&quot;: &quot;2014-01-05T18:29:37.123+0100&quot;
        },
        {
            &quot;@id&quot;: &quot;http://refserv.oparl.org/bodies/0/papers/20/documents/5&quot;,
            &quot;created&quot;: &quot;2014-01-04T11:26:48.638+0100&quot;
        },
        ...
    ],
    &quot;nextPage&quot;: &quot;http://refserv.oparl.org/feeds/new/?t=20140106170100402&quot;
}
</programlisting>
      <para>
        Wie im Beispiel zu sehen ist, enthält die Eigenschaft
        <literal>items</literal> eine Liste mit unbenannten Objekten.
        Dies ist ein Unterschied zu herkömmlichen Objektlisten, bei
        denen an dieser Stelle lediglich URLs als Listeneinträge
        erwartet werden.
      </para>
      <para>
        Jedes der Objekte in der <literal>items</literal>-Liste MUSS
        seinerseits wiederum zwei Eigenschaften besitzen:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <literal>@id</literal>: Die URL des neuen Objekts
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>created</literal>: Der Zeitpunkt der Erzeugung des
            Objekts
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Wie für Objektlisten üblich, SOLL auch für Feeds automatisch
        eine Aufteilung auf mehrere Seiten vorgenommen und ein
        Paginierungs-Link angeboten werden, um die übertragenen
        Datenmengen je Abruf einzugrenzen.
      </para>
      <para>
        Der jeweils in der Eigenschaft <literal>created</literal>
        ausgegebene Zeitpunkt SOLL vom Server als Sortierkriterium der
        Liste genutzt werden. So können Clients den jeweils am Anfang
        der Liste vorgefundenen Zeitpunkt als Begrenzung für die
        zukünftige Abfrage des Feeds nutzen. Ein Beispiel zur
        Erläuterung:
      </para>
      <para>
        Am 1. April 2014 ruft ein Client den Feed ab und findet im
        ersten Listeneintrag den <literal>created</literal>-Zeitpunkt
        <literal>2014-03-31T18:02:34.058+0200</literal> vor, den er sich
        als Grenzwert merkt. Beim nächsten Abruf des Feeds einige Tage
        später muss der Client die Liste nur so weit abarbeiten, so
        lange der <literal>created</literal>-Zeitpunkt der Einträge
        größer oder gleich dem Grenzwert ist.
      </para>
    </sect3>
    <sect3 id="feed_geaenderte_objekte">
      <title>Der Feed &quot;Geänderte Objekte&quot;</title>
      <para>
        Der Feed für geänderte Objekte listet die URLs geänderter
        Objekte in der Reihenfolge des Datums ihrer Änderung, wobei das
        zuletzt Objekt zuerst ausgegeben wird.
      </para>
      <para>
        Die Definition einer &quot;Änderung&quot; kann sich zwischen den
        Objekttypen unterscheiden. Tendenziell soll die Definition eher
        weiter ausgelegt werden, als enger. Als Änderung einer
        Organisation könnte es beispielsweise verstanden werden, wenn
        ein neues Mitglied zur Organisation hinzukommt. Das Erstellen
        eines Objekts (im Sinne des Feeds &quot;Neue Objekte&quot;)
        sollte hingegen nicht als Änderung gewertet werden, um das
        redundante Erscheinen eines neuen Objekts sowohl im Feed
        &quot;Neue Objekte&quot; als auch im Feed &quot;Geänderte
        Objekte&quot; zu vermeiden.
      </para>
      <para>
        Auch hier SOLL der Feed sämtliche Objekttypen umfassen, die in
        einem System geführt werden.
      </para>
      <programlisting language="json">
{
    &quot;items&quot;: [
        {
            &quot;@id&quot;: &quot;http://refserv.oparl.org/bodies/0/papers/0/documents/2&quot;,
            &quot;last_modified&quot;: &quot;2014-01-08T14:28:31.568+0100&quot;
        },
        {
            &quot;@id&quot;: &quot;http://refserv.oparl.org/bodies/0/papers/0&quot;,
            &quot;last_modified&quot;: &quot;2014-01-08T12:14:27.958+0100&quot;
        },
        {
            &quot;@id&quot;: &quot;http://refserv.oparl.org/bodies/0/papers/0/documents/1&quot;,
            &quot;last_modified&quot;: &quot;2014-01-06T17:01:00.402+0100&quot;
        },
        ...
    ],
    &quot;nextPage&quot;: &quot;http://refserv.oparl.org/feeds/updated/?t=20140106170100402&quot;
}
</programlisting>
      <para>
        Das Ausgabeformat entspricht weitgehend dem des Feeds &quot;Neue
        Objekte&quot;, jedoch heißt hier die Eigenschaft für den
        Zeitpunkt der letzten Änderung <literal>last_modified</literal>.
        Auch hier gilt, dass der als <literal>last_modified</literal>
        ausgegebene Zeitpunkt auch als Sortierkriterium der Liste gelten
        SOLL.
      </para>
    </sect3>
    <sect3 id="feed_entfernte_objekte">
      <title>Der Feed &quot;Entfernte Objekte&quot;</title>
      <para>
        Der Feed für entferne Objekte listet die URLs entfernter Objekte
        in der Reihenfolge des Datums ihrer Entfernung auf, wobei die
        zuletzt entfernten Objekte zuerst ausgegeben werden.
      </para>
      <para>
        Mit &quot;Entfernung&quot; ist im Sinne dieses Feeds die
        Löschung eines Objekts, aber auch die Depublikation oder das
        Beenden der öffentlichen Verfügbarkeit gemeint.
      </para>
      <para>
        Client-Implementierer sind angehalten, diesen Feed zu nutzen, um
        beispielsweise depublizierte Dokumente aus ihren lokalen Caches
        zu entfernen.
      </para>
      <programlisting language="json">
{
    &quot;items&quot;: [
        {
            &quot;@id&quot;: &quot;http://refserv.oparl.org/bodies/0/people/22&quot;,
            &quot;removed&quot;: &quot;2013-11-11T11:11:00.000+0100&quot;
        },
        ...
    ],
    &quot;nextPage&quot;: &quot;http://refserv.oparl.org/feeds/updated/?t=20131111111100&quot;
}
</programlisting>
      <para>
        Die Eigenschaft zur Angabe des Entfernugnszeitpunkts heißt hier
        <literal>removed</literal> und SOLL, analog zu den beiden
        anderen Feeds, als Sortierkriterium der Liste verwendet werden.
      </para>
    </sect3>
  </sect2>
  <sect2 id="dokumentenabruf">
    <title>Dokumentenabruf</title>
    <para>
      TODO:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          HTTP GET Methode MUSS unterstützt werden
        </para>
      </listitem>
      <listitem>
        <para>
          HEAD-Methode MUSS unterstützt werden
        </para>
      </listitem>
      <listitem>
        <para>
          HTTP Last-Modified Header sowie Conditional GET sind zu
          unterstützen
        </para>
      </listitem>
    </itemizedlist>
  </sect2>
  <sect2 id="ausnahmebehandlung">
    <title>Ausnahmebehandlung</title>
    <para>
      TODO:
    </para>
    <para>
      (Diskussion hierzu unter https://github.com/OParl/specs/issues/89)
    </para>
  </sect2>
  <sect2 id="liste-reservierter-url-parameter">
    <title>Liste reservierter URL-Parameter</title>
    <para>
      Die in dieser Liste enthaltenen Zeichenketten haben eine
      reservierte Bedeutung und stehen bei Implementierungen eines
      OParl-Servers nicht mehr für die freie Verwendung in URLs zur
      Verfügung.
    </para>
    <variablelist>
      <varlistentry>
        <term>
          callback:
        </term>
        <listitem>
          <para>
            Mit diesem Parameter wird die JSONP-Ausgabe aktiviert. Mehr
            dazu im Abschnitt <link linkend="jsonp">JSONP</link>.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          startdate:
        </term>
        <listitem>
          <para>
            Parameter für die Einschränkung einer Abfrage anhand eines
            Datums bzw. einer Zeitangabe.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          enddate:
        </term>
        <listitem>
          <para>
            Parameter für die Einschränkung einer Abfrage anhand eines
            Datums bzw. einer Zeitangabe.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
    <itemizedlist>
      <listitem>
        <para>
          (Parameter für Datums-/Zeitbereichsfilter)
        </para>
      </listitem>
    </itemizedlist>
  </sect2>
</sect1>
<sect1 id="schema">
  <title>Schema</title>
  <para>
    Dieses Kapitel beschreibt das Schema von OParl. Das Schema bildet
    das Datzenmodell der OParl-Architektur ab. Es definiert, welche
    Objekttypen über eine OParl-API abgerufen werden können und welche
    Eigenschaften diese Objekttypen haben dürfen und müssen. Darüber
    hinaus ist im Schema auch festgelegt, in welcher Beziehung
    verschiedene Objekttypen zu einander stehen.
  </para>
  <sect2 id="übergreifende-aspekte">
    <title>Übergreifende Aspekte</title>
    <sect3 id="unicode-zeichenketten-als-standard">
      <title>Unicode-Zeichenketten als Standard</title>
      <para>
        Wenn in der nachfolgenden Schema-Beschreibung nicht anders
        angegeben, werden bei den Werten grundsätzlich
        Unicode-Zeichenketten (Strings) erwartet.
      </para>
    </sect3>
    <sect3 id="null-werte">
      <title>null-Werte</title>
      <para>
        JSON erlaubt es grundsätzlich, dass Eigenschaften den Wert
        <literal>null</literal> haben können. Im Rahmen dieser
        Spezifikation DARF das jedoch nur bei Eigenschaften der Fall
        sein, die als OPTIONAL oder EMPFOHLEN gekennzeichnet sind.
        ZWINGENDE Eigenschaften müssen einen Wert ungleich
        <literal>null</literal> besitzen.
      </para>
    </sect3>
    <sect3 id="datums--und-zeitangaben">
      <title>Datums- und Zeitangaben</title>
      <para>
        Für Datum und Zeit werden die in XML Schema festgelegten Typen
        verwendet (was nicht bedeutet, dass in OParl XML verwendet
        wird).
      </para>
      <para>
        Für ein Datum wird http://www.w3.org/TR/xmlschema-2/#date
        verwendet und für eine Zeit
        http://www.w3.org/TR/xmlschema-2/#dateTime. Dabei wird ein Datum
        (ein Tag ohne Uhrzeit) ohne Zeitzone und ein Datum mit Zeit mit
        Zeitzone angegeben, denn nur damit ist die Uhrzeit weltweit
        eindeutig ohne zusätzlich auf den Ort einer Sitzung o.ä. Bezug
        nehmen zu müssen.
      </para>
      <para>
        Diese Spezifikationen stützen sich auf RFC 3339
        (http://www.ietf.org/rfc/rfc3339.txt) und RFC 3339 wiederum auf
        ISO 8601.
      </para>
      <para>
        Im JSON-LD Kontext von OParl ist der Präfix 'xsd' so
        spezifiziert, dass Datums- und Zeittyp durch 'xsd:date' bzw.
        'xsd:dateTime' abgekürzt werden können.
      </para>
    </sect3>
    <sect3 id="mehrsprachigkeit">
      <title>Mehrsprachigkeit</title>
      <para>
        Für Texte ist durchgehend vorgesehen, dass diese mehrsprachig
        sein können. Kommunale Anbieter von OParl-Daten in Deutchland
        müssen aus gesetzlichen Gründen auf jeden Fall die deutsche
        Sprache unterstützten. Die Unterstützung anderer Sprachen ist
        dagegen optional. Deshalb wird grundsätzich durch
        <subscript>~</subscript>~~ &quot;@language&quot;:
        &quot;de&quot;, <subscript>~</subscript>~~ im Kontext die
        deutsche Sprache als Vorgabe eingestellt.
      </para>
      <para>
        Es gibt aber möglicherweise auch Zeichenketten, die für die
        keine Mehrsprachigkeit vorgesehen wird. Dazu gehören z.B.
        Personennamen.
      </para>
      <para>
        TODO: Stimmt nicht. Tamilische Namen verwenden in der
        Originalschreibweise sogar ein vollkommen anderes Alphabet.
      </para>
    </sect3>
    <sect3 id="präfixe-in-kontexten">
      <title>Präfixe in Kontexten</title>
      <para>
        Die Beispiel-Kontexte verwenden eine Reihe von Präfixen. Diese
        sind hier zusammengestellt und werden in den einzelnen
        Beispiel-Kontexten nicht jeweils wiederholt:
      </para>
      <programlisting language="json">
    &quot;beispielris&quot;: &quot;http://beispielris.de/&quot;,
    &quot;oparl&quot;: &quot;http://oparl.org/xyz/&quot;,
    &quot;dc&quot;: &quot;http://purl.org/dc/terms/&quot;,
    &quot;foaf&quot;: &quot;http://xmlns.com/foaf/0.1/&quot;,
    &quot;skos&quot;: &quot;http://www.w3.org/2004/02/skos/core#&quot;,
    &quot;vcard&quot;: &quot;http://www.w3.org/2006/vcard/ns#&quot;,
    &quot;xsd&quot;: &quot;http://www.w3.org/2001/XMLSchema#&quot;,
    &quot;ogc&quot;: &quot;http://www.opengis.net/ont/geosparql#&quot;,
</programlisting>
    </sect3>
    <sect3 id="herstellerspezifische-erweiterungen">
      <title>Herstellerspezifische Erweiterungen</title>
      <para>
        Diese sind - falls tatsächlich erforderlich - mit den JSON-LD
        Mitteln einfach möglich. z.B.
      </para>
      <programlisting>
&quot;herstellera:newWonderProperty&quot;: &quot;Dies ist ein Feature welches noch kein anderer Hersteller bietet!&quot;
</programlisting>
    </sect3>
    <sect3 id="url-pfade-in-den-beispielen">
      <title>URL-Pfade in den Beispielen</title>
      <para>
        OParl-Clients wissen <emphasis>nichts</emphasis> vom Aufbau von
        Pfaden innerhalb von URLs, müssen dies nicht wissen und es gibt
        deshalb in der OParl-Spezifikation <emphasis>keine</emphasis>
        Festlegungen dazu.
      </para>
      <para>
        Wenn ein RIS-Betreiber z.B. meint, dass eine Person eine eigene
        Domain verdient, dann ist so etwas aus OParl-Sicht völlig ok:
        <subscript><subscript><subscript><subscript><subscript><subscript><subscript><subscript><subscript><subscript>
        https://ratsmitglied-max-mustermann.beispielris.de/mein-oparl-datensatz
        </subscript></subscript></subscript></subscript></subscript></subscript></subscript></subscript></subscript></subscript>
      </para>
      <para>
        Noch etwas extremer: selbst eine eigene Domain für jedes
        einzelne OParl-Objekt würde der OParl-Spezifikation nicht
        widersprechen.
      </para>
      <para>
        Wenn also so etwas wie
        <subscript><subscript><subscript><subscript><subscript><subscript><subscript><subscript><subscript><subscript>
        bodies/0/peoples/
        </subscript></subscript></subscript></subscript></subscript></subscript></subscript></subscript></subscript></subscript>
      </para>
      <para>
        in einer URL eines Beispiels auftaucht, dann bedeutet das nicht,
        dass genau solche Pfade durch die OParl-Spezifikation
        vorgeschrieben sind.
      </para>
      <para>
        Auch dies wäre als absoluter Link z.B. für eine Person
        verwendbar:
      </para>
      <programlisting>
https://www.ratsinfomanagement.net/personen/?__=LfyIfvCWq8SpBQj0MiyHaxDZwGJ
</programlisting>
      <para>
        Dies käme dann als relativer Link für die Person in Frage:
        <subscript><subscript>~</subscript>~</subscript>~~
        personen/?__=LfyIfvCWq8SpBQj0MiyHaxDZwGJ
        <subscript><subscript>~</subscript>~</subscript>~~
      </para>
      <para>
        oder auch z.B. dies
        <subscript><subscript><subscript><subscript><subscript><subscript><subscript><subscript><subscript><subscript>
        LfyIfvCWq8SpBQj0MiyHaxDZwGJ
        </subscript></subscript></subscript></subscript></subscript></subscript></subscript></subscript></subscript></subscript>
      </para>
      <para>
        Gleichzeitig ist aber aus verschiedenen Gründen ein
        strukturierter Aufbau der Pfade durchaus sinnvoll, der sich an
        der Hierarchie der Objekte orientiert (nicht zuletzt, weil dies
        Softwareentwicklern während der Entwicklung helfen kann).
        Dennoch wird eine solche Struktur bewusst nicht in OParl
        festgelegt.
      </para>
    </sect3>
  </sect2>
  <sect2 id="eigenschaften-mit-verwendung-in-mehreren-objekttypen">
    <title>Eigenschaften mit Verwendung in mehreren Objekttypen</title>
    <sect3 id="id">
      <title><literal>@id</literal></title>
      <para>
        URL des Objekts und eindeutiges Identifikationsmerkmal. Siehe
        dazu auch &quot;Benannte Objekte&quot;. Dies ist ein ZWINGENDES
        Merkmal für jedes Objekt.
      </para>
    </sect3>
    <sect3 id="type">
      <title><literal>@type</literal></title>
      <para>
        Objekttypenangabe des Objekts. ZWINGEND für jedes Objekt.
      </para>
    </sect3>
    <sect3 id="name-und-namelong">
      <title><literal>name</literal> und
      <literal>nameLong</literal></title>
      <para>
        Beide Eigenschaften können bei vielen Objekttypen genutzt
        werden, um den nutzerfreundlichen Namen des Objekts anzugeben.
        Üblicherweise ist <literal>name</literal> eine
        Pflichteigenschaft, während nameLong optional angegeben werden
        kann. Dies ist dann zu empfehlen, wenn zu einem Namen eine kurze
        bzw. kompakte und eine längere, aber weniger nutzerfreundliche
        Variante existieren. Ein Beispiel wäre die Kurzform
        &quot;CDU&quot; für den Parteinamen &quot;Christlich
        Demokratische Union Deutschlands&quot;.
      </para>
      <para>
        In keinem Fall sollten die Werte von <literal>name</literal> und
        <literal>nameLong</literal> identische sein.
      </para>
    </sect3>
    <sect3 id="license">
      <title><literal>license</literal></title>
      <para>
        Die Eigenschaft <literal>license</literal> erlaubt es, am
        jeweiligen Objekt die URL einer Lizenz anzugeben. Damit wird
        gekennzeichnet, welche Lizenz der Veröffentlicher der Daten für
        das jeweilige Objekt vergibt.
      </para>
      <para>
        Eine besondere Bedeutung hat die Eigenschaft
        <literal>license</literal>, wenn sie am
        <literal>oparl:System</literal> Objekt oder am
        <literal>oparl:Body</literal> Objekt vergeben wird. Die hier
        angegebene Lizenzinformation sagt aus, dass alle Objekte dieses
        Systems unter der angegebenen Lizenz veröffentlicht werden,
        sofern dies nicht am jeweiligen Objekt mit einer anders
        lautenden Lizenz-URL überschrieben wird. Daher wird dringend
        EMPFOHLEN, die Lizenzinformation global am
        <literal>oparl:System</literal> Objekt mitzuteilen und auf
        redundante Informationen zu verzichten.
      </para>
      <para>
        Auf Objekte vom Typ <literal>oparl:Document</literal> bezogen
        bezieht sich die Lizenzinformation nicht nur auf die
        strukturierten Metadaten, die über die API bezogen werden,
        sondern auch auf den eigentlichen Inhalt der Dateien, die über
        die angebotene(n) URL(s) abgerufen werden können.
      </para>
    </sect3>
    <sect3 id="created">
      <title><literal>created</literal></title>
      <para>
        Datum und Uhrzeit der Erstellung des jeweiligen Objekts.
      </para>
    </sect3>
    <sect3 id="modified">
      <title><literal>modified</literal></title>
      <para>
        Diese Eigenschaft kennzeichnet stets Datum und Uhrzeit der
        letzten Änderung des jeweiligen Objekts.
      </para>
      <para>
        In Einzelfällen unterliegt die Frage, was als Änderung eines
        Objekts bezeichnet werden kann, einem gewissen
        Interpretationsspielraum. Beispielsweise ist zu entscheiden, ob
        eine Gruppierung (<literal>oparl:Organization</literal>) als
        geändert gilt, wenn ein neues Mitglied hinzugefügt wurde.
      </para>
      <para>
        Diese Frage sollte aus Sicht des OParl-Clients beantwortet
        werden. Wenn beispielsweise eine Gruppierung vom Server
        grundsätzlich mit der Liste der URLs aller Mitglieder ausgegeben
        wird, umfasst das Objekt aus Sicht des Clients eben auch die
        Liste der Mitglieder. In diesem Fall wäre eine Veränderung der
        Liste der Mitglieder als Änderung des Objekts zu verstehen, die
        im <literal>modified</literal> Zeitstempel widerspiegeln sollte.
      </para>
    </sect3>
    <sect3 id="classification">
      <title><literal>classification</literal></title>
      <para>
        Dient der Verschlagwortung und verweist dazu auf ein oder
        eventuell auch mehrere <literal>skos:Concept</literal>-Objekte
        mit einer <literal>skos:prefLabel</literal>-Eigenschaft. Der
        Wert der Eigenschaft ist jeweils eine Zeichenkette. Die
        verwendete Sprache (in der Regel &quot;de&quot; für Deutsch)
        MUSS dabei angegeben werden.
      </para>
      <para>
        TODO: SKOS darstellen
      </para>
      <para>
        TODO: Beispiel
      </para>
      <para>
        Siehe u.a.:
      </para>
      <programlisting>
https://github.com/OParl/specs/issues/41
</programlisting>
      <para>
        Geoportal.de und DeStat.de werden bereits auf Basis von
        Metadaten-Standards verlinkt. Bei einer Verwendung von
        Metadaten-Standards für RIS könnten ebenfalls interessante
        Potenziale durch Verlinkung entstehen. Der
        GovData-Metadaten-Standard z.B. kann genutzt werden
      </para>
      <programlisting>
http://htmlpreview.github.com/?https://github.com/fraunhoferfokus/ogd-metadata/blob/master/OGPD_JSON_Schema.html
</programlisting>
      <para>
        und die 14 GovData-Kategorien können dabei durch eine
        zusätzliche Verschlagwortung auf Basis von
        Standard-Schlagwortkatalogen für RIS eine Ergänzung erfahren (
        LeiKa, Bremer-Katalog, DBpedia, RAMON).
      </para>
      <para>
        Die 14 Werte des GovData-Metadaten-Standard sind bisher nicht
        als Linked Data existent. TODO: eventuell können diese in OParl
        als Schlagwort-<literal>skos:Concept</literal>-Objekte als nicht
        abschliessende Menge von Schlagworten vorgegeben werden.
      </para>
    </sect3>
  </sect2>
  <sect2 id="oparl_system">
    <title>oparl:System (System)</title>
    <para>
      Der Objekttyp <literal>oparl:System</literal> bildet grundlegende
      Informationen zum parlamentarischen Informationssystem ab. Das
      Objekt repräsentiert das technische System, unabhängig von der
      Frage, welche Körperschaften auf diesem System vertreten sind.
    </para>
    <para>
      Ein Beispiel:
    </para>
    <programlisting language="json">
{
    &quot;@type&quot;: &quot;oparl:System&quot;,
    &quot;@id&quot;: &quot;http://beispielris.de/&quot;,
    &quot;oparlVersion&quot;: &quot;http://oparl.org/specs/1.0/&quot;,
    &quot;name&quot;: &quot;Beispiel-System&quot;,
    &quot;risWebsite&quot;: &quot;http://www.beispielris.de/&quot;,
    &quot;contactEmail&quot;: &quot;mailto:info@beispielris.de&quot;,
    &quot;contactName&quot;: &quot;Allgemeiner OParl Kontakt&quot;,
    &quot;vendor&quot;: &quot;http://example-software.com/&quot;,
    &quot;product&quot;: &quot;http://example-software.com/oparl-server/&quot;,
    &quot;bodies&quot;: &quot;http://beispielris.de/bodies/&quot;,
    &quot;newObjects&quot;: &quot;http://beispielris.de/new_objects/&quot;,
    &quot;updatedObjects&quot;: &quot;http://beispielris.de/updated_objects/&quot;,
    &quot;removedObjects&quot;: &quot;http://beispielris.de/removed_objects&quot;
}
</programlisting>
    <para>
      Ein Kontext:
    </para>
    <programlisting language="json">
{
    &quot;@language&quot;: &quot;de&quot;,

    &quot;beispielris&quot;: &quot;http://beispielris.de/&quot;,
    &quot;oparl&quot;: &quot;http://oparl.org/xyz/&quot;,
    &quot;dc&quot;: &quot;http://purl.org/dc/terms/&quot;,
    &quot;foaf&quot;: &quot;http://xmlns.com/foaf/0.1/&quot;,
    &quot;skos&quot;: &quot;http://www.w3.org/2004/02/skos/core#&quot;,
    &quot;vcard&quot;: &quot;http://www.w3.org/2006/vcard/ns#&quot;,
    &quot;xsd&quot;: &quot;http://www.w3.org/2001/XMLSchema#&quot;,

    &quot;name&quot;: {
        &quot;@id&quot;: &quot;skos:prefLabel&quot;,
        &quot;@type&quot;: &quot;@id&quot;
    },
    &quot;contactEmail&quot;: {
        &quot;@id&quot;: &quot;foaf:mbox&quot;,
        &quot;@type&quot;: &quot;@id&quot;
    },
}
</programlisting>
    <para>
      Und das System-Objekt in kompakter Form unter Verwendung des
      Kontext:
    </para>
    <programlisting language="json">
{
    &quot;@type&quot;: &quot;oparl:System&quot;,
    &quot;@id&quot;: &quot;http://beispielris.de/&quot;,
    &quot;oparlVersion&quot;: &quot;http://oparl.org/specs/1.0/&quot;,
    &quot;name&quot;: &quot;Beispiel-System&quot;,
    &quot;risWebsite&quot;: &quot;http://www.beispielris.de/&quot;,
    &quot;contactEmail&quot;: &quot;mailto:info@beispielris.de&quot;,
    &quot;contactName&quot;: &quot;Allgemeiner OParl Kontakt&quot;,
    &quot;vendor&quot;: &quot;http://example-software.com/&quot;,
    &quot;product&quot;: &quot;http://example-software.com/oparl-server/&quot;,
    &quot;bodies&quot;: &quot;http://beispielris.de/bodies/&quot;,
    &quot;newObjects&quot;: &quot;beispielris:new_objects/&quot;,
    &quot;updatedObjects&quot;: &quot;beispielris:updated_objects/&quot;,
    &quot;removedObjects&quot;: &quot;beispielris:removed_objects&quot;
}
</programlisting>
    <para>
      Auf jedem OParl Server MUSS ein Objekt vom Typ
      <literal>oparl:System</literal> vorgehalten werden. Es DARF nur
      ein einziges solches Objekt je Server existieren.
    </para>
    <para>
      Für Clients ist das <literal>oparl:System</literal> Objekt ein
      geeigneter Einstiegspunkt, um grundlegende Informationen über das
      Sytem zu bekommen und die URLs zum Zugriff auf andere
      Informationen in Erfahrung zu bringen.
    </para>
    <para>
      Die URL des <literal>oparl:System</literal> Objekts MUSS per
      Definition identisch mit der URL des API-Endpunkts des Servers
      sein.
    </para>
    <sect3 id="well-known-uris">
      <title>Well-Known URIs</title>
      <para>
        TODO: eventuell in eigenen Abschnitt oder eigenes Kapitel
        auslagern.
      </para>
      <para>
        Es gibt eine standardisierte Technik, mit der ein Einstiegspunkt
        in die OParl-Daten angegeben werden kann: &quot;Well-Known
        URIs&quot;. Dieser kann dann maschinell gefunden werden. Diese
        Technik wurde durch die IETF und das W3C standardisiert.
      </para>
      <para>
        Die Spezifikation von &quot;Well-Known URIs&quot; durch die IETF
        ist:
      </para>
      <para>
        Defining Well-Known Uniform Resource Identifiers (URIs)
        http://tools.ietf.org/html/rfc5785
      </para>
      <para>
        Eine Liste der Well-Known URIs wird von der IANA verwaltet:
      </para>
      <para>
        Well-Known URIs
        http://www.iana.org/assignments/well-known-uris/well-known-uris.xhtml
      </para>
      <para>
        Für OParl sind gegenwärtig nur &quot;Well-Known URIs&quot; für
        Beschreibungen von Datasets gemäß dem &quot;Vocabulary of
        Interlinked Datasets&quot; (VoID) relevant.
      </para>
      <para>
        BEISPIEL:
      </para>
      <para>
        Wenn ein RIS unter der Domain &quot;example.com&quot; betrieben
        wird, dann sieht der &quot;Well-Known URI&quot; so aus (der
        enthaltene &quot;.&quot; ist <emphasis>kein</emphasis>
        Schreibfehler):
      </para>
      <para>
        https://example.com/.well-known/void
      </para>
      <para>
        Forwarding ist erlaubt.
      </para>
      <para>
        Siehe dazu auch:
      </para>
      <para>
        Describing Linked Datasets with the VoID Vocabulary W3C Interest
        Group Note 03 March 2011 http://www.w3.org/TR/void/#well-known
      </para>
      <para>
        Die über derartige URIs dereferenzierbaren Dokumente sind hier
        spezifiziert: http://www.w3.org/TR/void/#void-file
      </para>
      <para>
        BEISPIEL:
      </para>
      <para>
        Bei einem http GET Request auf
        https://example.com/.well-known/void mit Angabe des bevorzugten
        MIME-Type &quot;application/ld+json&quot; antwortet das System
        mit dem URI https://example.com/.well-known/void.jsonld unter
        welchem dieses JSON-LD Dokument abrufbar ist:
      </para>
      <para>
        TODO: Beispiele für JSON-LD und exemplarisch auch für HTML.
      </para>
    </sect3>
    <sect3 id="eigenschaften">
      <title>Eigenschaften</title>
      <variablelist>
        <varlistentry>
          <term>
            <literal>oparlVersion</literal>
          </term>
          <listitem>
            <para>
              Die URL der OParl-Spezifikation, die von diesem Server
              unterstützt wird. Der Wert MUSS die URL
              <literal>http://oparl.org/specs/1.0/</literal> sein. Diese
              Eigenschaft ist ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>bodies</literal>
          </term>
          <listitem>
            <para>
              Liste der URLs der
              <link linkend="oparl_body"><literal>oparl:Body</literal></link>-Objekte,
              also der Körperschaften, die auf dem System vorliegen.
              Alternativ kann statt einer Liste eine einzelne URL zum
              Abruf der Liste angeboten werden. Die Eigenschaft ist
              ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>name</literal>
          </term>
          <listitem>
            <para>
              Nutzerfreundlicher Name für das System, mit dessen Hilfe
              Nutzer das System erkennen und von anderen unterscheiden
              können. Diese Eigenschaft wird EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>contactEmail</literal>
          </term>
          <listitem>
            <para>
              E-Mail-Adresse für Anfragen zur OParl-API. Diese
              Eigenschaft wird EMPFOHLEN. Die Angabe einer
              E-Mail-Adresse dient sowohl NutzerInnen wie auch
              EntwicklerInnen von Clients zur Kontaktaufnahme mit dem
              Betreiber.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>contactName</literal>
          </term>
          <listitem>
            <para>
              Name des Ansprechpartners oder der Abteilung, die über die
              <literal>contactEmail</literal> erreicht werden kann. Die
              Eigenschaft ist EMPFOHLEN. Typ: Zeichenkette.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>newObjects</literal>
          </term>
          <listitem>
            <para>
              URL des Feeds <link linkend="feed_neue_objekte">&quot;Neue
              Objekte&quot;</link>. Die Eigenschaft ist EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>updatedObjects</literal>
          </term>
          <listitem>
            <para>
              URL des Feeds
              <link linkend="feed_geaenderte_objekte">&quot;Geänderte
              Objekte&quot;</link>. Die Eigenschaft ist EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>removedObjects</literal>
          </term>
          <listitem>
            <para>
              URL des Feeds
              <link linkend="feed_entfernte_objekte">&quot;Entfernte
              Objekte&quot;</link>. Die Eigenschaft ist EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>risWebsite</literal>
          </term>
          <listitem>
            <para>
              URL zur WWW-Oberfläche des parlamentarischen
              Informationssystem. Diese Eigenschaft ist OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>vendor</literal>
          </term>
          <listitem>
            <para>
              URL des Software-Anbieters, von dem die
              OParl-Server-Software stammt. Diese Eigenschaft ist
              OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>product</literal>
          </term>
          <listitem>
            <para>
              URL mit Informationen zu der auf dem System genutzten
              OParl-Server-Software. Diese Eigenschaft ist OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect3>
  </sect2>
  <sect2 id="oparl_body">
    <title>oparl:Body (Körperschaft)</title>
    <para>
      Der Objekttyp <literal>oparl:Body</literal> dient dazu, eine
      Körperschaft und damit ein Parlament zu repräsentieren, zu dem der
      Server Informationen bereithält. Eine Körperschaft kann
      beispielsweise eine Gemeinde, ein Landkreis oder ein kommunaler
      Zweckverband sein.
    </para>
    <para>
      Hätte das System beispielsweise den Zweck, Informationen über das
      kommunale Parlament der Stadt Köln, namentlich den Rat der Stadt
      Köln, abzubilden, dann müsste dieses System dazu ein Objekt vom
      Typ <literal>oparl:Body</literal> führen, welches die Stadt Köln
      repräsentiert.
    </para>
    <para>
      Ein Kontext:
    </para>
    <programlisting>
{
    &quot;@language&quot;: &quot;de&quot;,
    
    &quot;license&quot;: {
        &quot;@id&quot;: &quot;dc:license&quot;,
        &quot;@type&quot;: &quot;@id&quot;
    },
    &quot;exactMatch&quot;: {
        &quot;@id&quot;: &quot;skos:exactMatch&quot;,
        &quot;@type&quot;: &quot;@id&quot;
    }
    
    &quot;licenseValidSinceDay&quot;: // TODO: datum
}
</programlisting>
    <para>
      Ein expandiertes Beispiel:
    </para>
    <programlisting language="json">
{
    &quot;@type&quot;: &quot;http://oparl.org/schema/1.0/Body&quot;,
    &quot;@id&quot;: &quot;http://oparl.beispielris.de/body/0&quot;,
    &quot;system&quot;: &quot;http://oparl.beispielris.de/&quot;,
    &quot;contactEmail&quot;: &quot;mailto:ris@beispielstadt.de&quot;,
    &quot;contactName&quot;: &quot;RIS-Betreuung&quot;,
    &quot;rgs&quot;: &quot;053150000000&quot;,
    &quot;equivalentBody&quot;: [
        &quot;http://d-nb.info/gnd/2015732-0&quot;,
        &quot;http://dbpedia.org/resource/Cologne&quot;
    ],
    &quot;name&quot;: &quot;Stadt K\u00f6ln&quot;,
    &quot;nameLong&quot;: { // verwendet eine &quot;language map&quot;
        &quot;de&quot;: &quot;Stadt K\u00f6ln, kreisfreie Stadt&quot;,
        &quot;en&quot;: &quot;City of Cologne&quot;
    }
    &quot;website&quot;: &quot;http://www.beispielstadt.de/&quot;,
    &quot;license&quot;: &quot;http://creativecommons.org/licenses/by/4.0/&quot;,
    &quot;licenseValidSinceDay&quot;: &quot;2014-01-01&quot;,
    &quot;organization&quot;: &quot;http://oparl.beispielris.de/body/0/organisation/&quot;,
    &quot;meeting&quot;: &quot;http://oparl.beispielris.de/body/0/meeting/&quot;,
    &quot;paper&quot;: &quot;http://oparl.beispielris.de/body/0/paper/&quot;,
    &quot;member&quot;: &quot;http://oparl.beispielris.de/body/0/person/&quot;,
    &quot;classification&quot;: &quot;http://oparl.beispielris.de/vocab/landkreis&quot;,
    &quot;created&quot;: &quot;2014-01-08T14:28:31.568+0100&quot;,
    &quot;modified&quot;: &quot;2014-01-08T14:28:31.568+0100&quot;
}
</programlisting>
    <para>
      Vom OParl-Server wird erwartet, dass er mindestens ein Objekt vom
      Typ <literal>oparl:Body</literal> bereit hält. Teilen sich mehrere
      Körperschaften das selbe technische System, können auf demselben
      Server auch mehrere Objekte vom Typ <literal>oparl:Body</literal>
      beherbergt werden.
    </para>
    <para>
      Über die Zuordnung zu einem bestimmten
      <literal>oparl:Body</literal> Objekt zeigen andere Objekte, wie
      beispielsweise Gremien oder Drucksachen, ihre Zugehörigkeit zu
      einer bestimmten Körperschaft und damit implizit zu einem
      bestimmten Parlament an.
    </para>
    <sect3 id="eigenschaften-1">
      <title>Eigenschaften</title>
      <variablelist>
        <varlistentry>
          <term>
            <literal>system</literal>
          </term>
          <listitem>
            <para>
              URL des Objekts vom Typ <literal>oparl:System</literal>
              Objekts, zu dem dieses Objekt gehört. ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>name</literal>
          </term>
          <listitem>
            <para>
              Gibt den gebräuchlichen Namen der Körperschaft an.
              ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>nameLong</literal>
          </term>
          <listitem>
            <para>
              Kann bei Bedarf dazu verwendet werden, eine längere Form
              des Namens der Körperschaft anzugeben. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>website</literal>
          </term>
          <listitem>
            <para>
              Dient der Angabe der WWW-URL der Körperschaft. EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>license</literal>
          </term>
          <listitem>
            <para>
              URL der Lizenz, die für die Daten, die über diese API
              abgerufen werden können, gilt, sofern nicht am einzelnen
              Objekt anders angegeben. Verzeichnisse für solche
              Lizenz-URLs sind insbesondere
              http://licenses.opendefinition.org/ und
              https://github.com/fraunhoferfokus/ogd-metadata/blob/master/lizenzen/deutschland.json
              EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>licenseValidSinceDay</literal>
          </term>
          <listitem>
            <para>
              Tagesdatum, seit dem die unter license angegebene Lizenz
              gilt. Vorsicht bei Änderungen der Lizenz die zu
              restriktiveren Bedingungen führen. EMPFOHLEN
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>rgs</literal>
          </term>
          <listitem>
            <para>
              Regionalschlüssel der Körperschaft als zwölfstellige
              Zeichenkette<footnote>
                <para>
                  Regionalschlüssel können im
                  <ulink url="https://www.destatis.de/DE/ZahlenFakten/LaenderRegionen/Regionales/Gemeindeverzeichnis/Gemeindeverzeichnis.html">Gemeindeverzeichnis
                  (GV-ISys) des Statistischen Bundesamtes</ulink>
                  eingesehen werden
                </para>
              </footnote>. Diese Eigenschaft ist EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>sameBody</literal>
          </term>
          <listitem>
            <para>
              Dient der Angabe beliebig vieler zusätzlicher URLs, die
              die Körperschaft repräsentieren. Diese Eigenschaft ist
              EMPFOHLEN. Hier können beispielsweise, sofern vorhanden,
              der entsprechende Eintrag der Gemeinsamen Normdatei der
              Deutschen Nationalbibliothek<footnote>
                <para>
                  Gemeinsame Normdatei
                  <ulink url="http://www.dnb.de/gnd">http://www.dnb.de/gnd</ulink>
                </para>
              </footnote>, der DBPedia<footnote>
                <para>
                  DBPedia
                  <ulink url="http://www.dbpedia.org/">http://www.dbpedia.org/</ulink>
                </para>
              </footnote> oder der Wikipedia<footnote>
                <para>
                  Wikipedia
                  <ulink url="http://de.wikipedia.org/">http://de.wikipedia.org/</ulink>
                </para>
              </footnote> angegeben werden.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>contactEmail</literal>
          </term>
          <listitem>
            <para>
              Dient der Angabe einer Kontakt-E-Mail-Adresse mit
              &quot;mailto:&quot;-Schema. Diese Eigenschaft ist
              EMPFOHLEN. Die Adresse soll die Kontaktaufnahme zu einer
              für die Körperschaft und idealerweise das parlamentarische
              Informationssystem zuständigen Stelle ermöglichen.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>contactName</literal>
          </term>
          <listitem>
            <para>
              Name oder Bezeichnung der mit
              <literal>contactEmail</literal> erreichbaren Stelle.
              OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>paper</literal>
          </term>
          <listitem>
            <para>
              URL, unter welcher die API die Liste aller Objekte vom Typ
              <literal>oparl:Paper</literal>, also die Drucksachen unter
              dieser Körperschaft ausgibt. Diese Eigenschaft ist
              ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>member</literal>
          </term>
          <listitem>
            <para>
              URL, unter welcher die API die Liste aller Objekte vom Typ
              <literal>oparl:Person</literal>, also die Personen unter
              dieser Körperschaft ausgibt. Diese Eigenschaft ist
              ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>meeting</literal>
          </term>
          <listitem>
            <para>
              URL, unter welcher die API die Liste aller Objekte vom Typ
              <literal>oparl:Meeting</literal>, also die Sitzungen
              dieser Körperschaft ausgibt. Diese Eigenschaft ist
              ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>organization</literal>
          </term>
          <listitem>
            <para>
              URL, unter welcher die API die Liste aller Objekte vom Typ
              <literal>oparl:Organization</literal>, also die
              Gruppierungen dieser Körperschaft ausgibt. Diese
              Eigenschaft ist ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>classification</literal>
          </term>
          <listitem>
            <para>
              <literal>skos:Concept</literal>
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>created</literal>
          </term>
          <listitem>
            <para>
              Datum/Uhrzeit der Erzeugung des Objekts. EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>lastModified</literal>
          </term>
          <listitem>
            <para>
              Datum/Uhrzeit der letzten Bearbeitung des Objekts.
              EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect3>
  </sect2>
  <sect2 id="oparl_organization">
    <title>oparl:Organization (Gruppierung)</title>
    <para>
      Dieser Objekttyp dient dazu, Gruppierungen von Personen
      abzubilden, die in der parlamentarischen Arbeit eine Rolle
      spielen. Dazu zählen in der Praxis insbesondere Fraktionen und
      Gremien.
    </para>
    <para>
      Ein Beispiel in expandierter Form:
    </para>
    <programlisting language="json">
{
    &quot;@type&quot;: &quot;http://oparl.org/schema/1.0/Organization&quot;,
    &quot;@id&quot;: &quot;http://oparl.beispielris.de/organization/34&quot;,
    &quot;body&quot;: &quot;http://oparl.beispielris.de/body/0&quot;,
    &quot;name&quot;: {
        @language&quot; :&quot;de&quot;,
        @value&quot;: &quot;Finanzausschuss&quot;
    },
    &quot;nameLong&quot;: {
        &quot;@language&quot;: &quot;de&quot;,
        &quot;@value&quot;: &quot;Finanzausschuss des Rates der Stadt Köln&quot;
    },
    &quot;post&quot;: {
        &quot;@list&quot;: [
        // ohne @list wird in JSON-LD die Reihenfolge nicht festgelegt
        &quot;http://oparl.beispielris.de/post/chairperson&quot;,
        &quot;http://oparl.beispielris.de/post/deputyChairperson&quot;
        ]
    },
    &quot;member&quot;: [
        &quot;http://oparl.beispielris.de/person/27&quot;,
        &quot;http://oparl.beispielris.de/person/48&quot;,
        &quot;http://oparl.beispielris.de/person/57&quot;
    ],
    &quot;organizationType&quot;: &quot;http://oparl.beispielris.de/vocab/committee&quot;,
    &quot;classification&quot;: &quot;http://oparl.beispielris.de/vocab/finance&quot;,
    &quot;modified&quot;: &quot;2012-08-16T14:05:27+02:00&quot;
}
</programlisting>
    <para>
      Das selbe Beispiel in kompakter Form.
    </para>
    <para>
      Ein Kontext: <subscript><subscript>~</subscript>~</subscript>~~ {
      &quot;@language&quot;: &quot;de&quot;, // ... }
      <subscript><subscript>~</subscript>~</subscript>~~
    </para>
    <programlisting language="json">
{
    &quot;@context&quot;: &quot;https://oparl.beispielris.de/Pfad/zum/Kontext/organization.jsonld&quot;,
    &quot;@type&quot;: &quot;oparl:Organization&quot;,
    &quot;@id&quot;: &quot;beispielris:organization/34&quot;,
      // kann eventuell weiter verkürzt werden
    &quot;body&quot;: &quot;0&quot;,
    &quot;name&quot;: &quot;Finanzausschuss&quot;,
    &quot;nameLong&quot;: &quot;Finanzausschuss des Rates der Stadt Köln&quot;,
    &quot;post:&quot; [
        &quot;beispielris:post/chairperson&quot;,
        &quot;beispielris:post/deputyChairperson&quot;
    ],
    &quot;members: [
        &quot;27&quot;,
        &quot;48&quot;,
        &quot;57&quot;
    ],
    &quot;organizationType&quot;: &quot;beispielris:vocab/committee&quot;,
    &quot;classification&quot;: &quot;beispielris:vocab/finance&quot;,
    &quot;modified&quot;: &quot;2012-08-16T14:05:27+02:00&quot;
}
</programlisting>
    <sect3 id="eigenschaften-2">
      <title>Eigenschaften</title>
      <variablelist>
        <varlistentry>
          <term>
            <literal>body</literal>
          </term>
          <listitem>
            <para>
              URL der Körperschaft, zu der diese Gruppierung gehört.
              ZWINGEND
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>name</literal>
          </term>
          <listitem>
            <para>
              Der Name der Gruppierung. ZWINGEND
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>nameLong</literal>
          </term>
          <listitem>
            <para>
              Langform des Namens der Gruppierung. OPTIONAL
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>post</literal>
          </term>
          <listitem>
            <para>
              Position oder Positionen, die für diese Gruppierung
              vorgesehen sind. Die Objekte gehören zu der Klasse
              <literal>org:Post</literal> oder einer ihrer Unterklassen.
              Die <literal>skos:prefLabel</literal>-Eigenschaften der
              Objekte SOLLEN sowohl die männliche als auch die weibliche
              Form enthalten, und zwar in dem Muster &quot;männliche
              Form | weibliche Form&quot; (genau in der Reihenfolge mit
              einem Leerzeichen vor und nach dem &quot;|&quot;) Wenn
              sich beide Formen nicht unterscheiden, dann DARF die Form
              nur einmal verwendet werden: &quot;Mitglied&quot; und
              nicht &quot;Mitglied | Mitglied&quot;. Dadurch kann auch
              solche Software einen sinnvollen Text anzeigen, die keine
              Fall-Unterscheidung nach Geschecht der Personen vornimmt.
              z.B. &quot;Vorsitzender | Vorsitzende&quot;, &quot;1.
              Stellvertreter | 1. Stellvertreterin&quot;, &quot;2.
              Stellvertreter | 2. Stellvertreterin&quot;,
              &quot;Schriftführer | Schriftführerin&quot;,
              &quot;Stellvertretender Schriftführer | Stellvertretende
              Schriftführerin&quot;, &quot;Ordentliches Mitglied&quot;,
              &quot;Stellvertretendes Mitglied&quot;
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>
        Siehe https://github.com/OParl/specs/issues/45 TODO:
        &quot;Ordentliches Mitglied&quot;, &quot;Stellvertretendes
        Mitglied&quot; müssen anders behandelt werden! OPTIONAL
      </para>
      <variablelist>
        <varlistentry>
          <term>
            <literal>member</literal>
          </term>
          <listitem>
            <para>
              URLs aller Mitglieder dieser Organisation (Objekte vom Typ
              <literal>[oparl:Person](#oparl_person)</literal>). Auch
              alle Personen mit Positionen in der Organisation sind hier
              anzugeben. ZWINGEND (falls es Mitglieder gibt)
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>subOrganizationOf</literal>
          </term>
          <listitem>
            <para>
              Ggf. URL der übergeordneten Organisation. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>created</literal>
          </term>
          <listitem>
            <para>
              Datum/Uhrzeit der Erzeugung des Objekts. EMPFOHLEN
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>classification</literal>
          </term>
          <listitem>
            <para>
              Schlagworte. Dies sind
              <literal>skos:Concept</literal>-Objekte mit einem
              <literal>skos:prefLabel</literal>-Attribut (für jede
              unterstützte Sprache) mit einer Zeichenkette. In einer
              zukünftigen OParl-Version wird möglicherweise eine Menge
              solcher Schlagwort-Objekte definiert. Anregungen gibt es
              u.a. in der Tabelle &quot;Kategorien&quot; im unteren
              Drittel der Seite
              http://htmlpreview.github.io/?https://github.com/fraunhoferfokus/ogd-metadata/blob/master/OGPD_JSON_Schema.html
              OPTIONAL
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>organizationType</literal>
          </term>
          <listitem>
            <para>
              Objekt mit <literal>skos:prefLabel</literal>, z.B.
              &quot;Rat&quot;, &quot;Hauptausschuss&quot;,
              &quot;Ausschuss&quot; &quot;Beirat&quot;,
              &quot;Projektbeirat&quot;, &quot;Kommission&quot;,
              &quot;AG&quot;, &quot;Verwaltungsrat&quot; OPTIONAL
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>modified</literal>
          </term>
          <listitem>
            <para>
              Datum/Uhrzeit der letzten Bearbeitung des Objekts.
              EMPFOHLEN
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect3>
  </sect2>
  <sect2 id="oparl_person">
    <title>oparl:Person (Person)</title>
    <para>
      Jede natürliche Person, die in der parlamentarischen Arbeit tätig
      ist und insbesondere Mitglied in einer Gruppierung
      (<link linkend="oparl_organization">oparl:Organization</link>),
      wird mit einem Objekt vom Typ <literal>oparl:Person</literal>
      abgebildet.
    </para>
    <para>
      Es gibt existieren bereits eine ganze Reihe von Vokabularen für
      Personen. Dazu gehören FOAF (Friend of a Friend) und vCard. Es
      gibt aber auch der XÖV-Standard für natürliche Personen, ein XML
      Schema. Für <literal>oparl:Person</literal> wurde daraus und
      basierend auf dem Input der OParl-Stakeholder eine Auswahl von
      Eigenschaften zusammengestellt.
    </para>
    <para>
      TODO: für Personen-Namen und Titel wird keine Mehrsprachigkeit
      benötigt. Dies im Kontext berücksichtigen. Dies spricht auch für
      je einen Kontext pro Klasse.
    </para>
    <para>
      Ein Beispiel in expandierter Form:
    </para>
    <programlisting language="json">
{
    &quot;@type&quot;: &quot;http://oparl.org/schema/1.0/Person&quot;,
    &quot;@id&quot;: &quot;http://oparl.beispielris.de/person/29&quot;,
    &quot;name&quot;: &quot;Prof. Dr. Max Mustermann&quot;,
    &quot;familyName&quot;: { // könnte mehrsprachig sein, z.B. griechisch, russisch, tamilisch 
        &quot;@value&quot;: &quot;Mustermann&quot;,
        &quot;@language&quot;: &quot;de&quot;
    }
    &quot;givenName&quot;: { // könnte mehrsprachig sein
        &quot;@value&quot;: &quot;Max&quot;,
        &quot;@language&quot;: &quot;de&quot;
    }
    &quot;title&quot;: &quot;Prof. Dr.&quot;, // TODO: nicht mehrsprachig?!
    &quot;formOfAddress&quot;: &quot;http://oparl.beispielris.de/formofaddress/ratsmitglied&quot;,
    &quot;gender&quot;: &quot;http://www.w3.org/2006/vcard/ns#Male&quot;,
    &quot;email&quot;: &quot;mailto:max@mustermann.de&quot;,
    &quot;phone&quot;: &quot;tel:+493012345678&quot;,
    &quot;streetAddress&quot;: &quot;Musterstraße 5&quot;, // nicht mehrsprachig
    &quot;postalCode&quot;: &quot;11111&quot;,
    &quot;locality&quot;: {
        &quot;de&quot;: &quot;Musterort&quot;,
        &quot;en&quot;: Sample Town&quot;
    }
    &quot;organization&quot;: [
        &quot;http://oparl.beispielris.de/organization/11&quot;,
        &quot;http://oparl.beispielris.de/organization/34&quot;
    ],
    &quot;status&quot;: &quot;http://oparl.beispielris.de/status/buergermeister&quot;,
    &quot;hasMembership&quot;: &quot;http://oparl.beispielris.de/membership/34&quot;,
    &quot;created&quot;: &quot;2011-11-11T11:11:00+01:00&quot;,
    &quot;modified&quot;: &quot;2012-08-16T14:05:27+02:00&quot;
}
</programlisting>
    <para>
      Das selbe Beispiel in kompakter Form. Zunächst der verwendete
      Kontext:
    </para>
    <programlisting language="json">
{
    &quot;@language&quot;: &quot;de&quot;,
    
    // Präfixe siehe Abschnitt 8000

    &quot;gender&quot;: &quot;vcard:hasGender&quot;,
    &quot;givenName&quot;: &quot;foaf:firstName&quot;,
    &quot;familyName&quot;: &quot;foaf:lastName&quot;,
    &quot;academic_degree&quot;: {
        &quot;@language&quot;: null , // keine Vorgabesprache da nicht mehrsprachig
        &quot;@id&quot;: &quot;foaf:title&quot;
    }
    &quot;email&quot;: {
        &quot;@id&quot;: &quot;foaf:mbox&quot;,
        &quot;@type&quot;: &quot;@id&quot;
    },
    &quot;phone&quot;: &quot;foaf:phone&quot;,
    &quot;streetAddress&quot;: &quot;vcard:street-address&quot;,
    &quot;locality&quot;: {
        &quot;@id&quot;: &quot;vcard:locality&quot;,
        &quot;@container&quot;: &quot;@language&quot; // für eine &quot;language map&quot;
    }
    &quot;created&quot;: {
        &quot;@id&quot;: &quot;dc:created&quot;,
        &quot;@type&quot;: &quot;xsd:dateTime&quot;
    },
    &quot;modified&quot;: {
        &quot;@id&quot;: &quot;dc:modified&quot;,
        &quot;@type&quot;: &quot;xsd:dateTime&quot;
    }
}
</programlisting>
    <programlisting language="json">
{
    &quot;@context&quot;: &quot;https://oparl.beispielris.de/Pfad/zum/Kontext/person.jsonld&quot;,
    &quot;@type&quot;: &quot;oparl:Person&quot;,
    &quot;@id&quot;: &quot;http://oparl.beispielris.de/person/29&quot;,
    &quot;name&quot;: &quot;Prof. Dr. Max Mustermann&quot;,
    &quot;familyName&quot;: &quot;Mustermann&quot;, // Kontext gibt deutsche Spache vor
    &quot;givenName&quot;: &quot;Max&quot;,
    &quot;title&quot;: &quot;Prof. Dr.&quot;,
    &quot;formOfAddress&quot;: &quot;beispielris:formofaddress/ratsmitglied&quot;,
    &quot;gender&quot;: &quot;vcard:Male&quot;,
    &quot;email&quot;: &quot;mailto:max@mustermann.de&quot;,
    &quot;phone&quot;: &quot;tel:+493012345678&quot;,
    &quot;streetAddress&quot;: &quot;Musterstraße 5&quot;,
    &quot;postalCode&quot;: &quot;11111&quot;,
    &quot;locality&quot;: &quot;Musterort&quot;,
    &quot;locality&quot;: {
        &quot;en&quot;: &quot;Sample Town&quot; // TODO prüfen, ob Eigenschaft doppelt erscheinen darf
    }
    &quot;organization&quot;: [&quot;11&quot;, &quot;34&quot;],
    &quot;status&quot;: &quot;beispielris:status/buergermeister&quot;,
    &quot;hasMembership&quot;: &quot;beispielris:membership/34&quot;,
    &quot;created&quot;: &quot;2011-11-11T11:11:00+01:00&quot;,
    &quot;modified&quot;: &quot;2012-08-16T14:05:27+02:00&quot;
}
</programlisting>
    <sect3 id="eigenschaften-3">
      <title>Eigenschaften</title>
      <variablelist>
        <varlistentry>
          <term>
            <literal>name</literal>
          </term>
          <listitem>
            <para>
              Der vollständige Name der Person mit akademischem Grad und
              Vornamen. ZWINGEND
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>familyName</literal>
          </term>
          <listitem>
            <para>
              Familienname bzw. Nachname. OPTIONAL
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>givenName</literal>
          </term>
          <listitem>
            <para>
              Vorname bzw. Taufname. OPTIONAL
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>formOfAddress</literal>
          </term>
          <listitem>
            <para>
              Anrede URLs von Objekten mit skos:prefLabel. Ähnlich wie
              <literal>status</literal>. Beispiele für die
              <literal>skos:prefLabel</literal> sind &quot;Ratsherr |
              Ratsfrau&quot; und &quot;Herr | Frau&quot;. OPTIONAL
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>title</literal>
          </term>
          <listitem>
            <para>
              Akademische(r) Titel. TODO: &quot;Dr.&quot;?
              &quot;Diplom&quot;? OPTIONAL
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>gender</literal>
          </term>
          <listitem>
            <para>
              Geschlecht. Zulässige Werte sind
              <literal>vcard:Female</literal>,
              <literal>vcard:Male</literal>,
              <literal>vcard:None</literal>,
              <literal>vcard:Other</literal> und
              <literal>vcard:Unknown</literal>. OPTIONAL
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>phone</literal>
          </term>
          <listitem>
            <para>
              Telefonnummer mit <literal>tel:</literal> Schema. OPTIONAL
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>email</literal>
          </term>
          <listitem>
            <para>
              E-Mail-Adresse mit <literal>mailto:</literal> Schema.
              OPTIONAL
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>streetAddress</literal>
          </term>
          <listitem>
            <para>
              Straße und Hausnummer der Kontakt-Anschrift der Person.
              OPTIONAL
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>postalCode</literal>
          </term>
          <listitem>
            <para>
              Postleitzahl der Kontakt-Anschrift der Person. OPTIONAL
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>locality</literal>
          </term>
          <listitem>
            <para>
              Ortsangabe der Kontakt-Anschrift der Person. OPTIONAL
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>organization</literal>
          </term>
          <listitem>
            <para>
              URLs der Gruppierung oder Liste der URLs der Gruppierungen
              (Objekte vom Typ <literal>oparl:Organization</literal>),
              in der bzw. in denen die Person aktuell Mitglied ist.
              Sollte die Person Mitglied in keiner Gruppierung sein,
              enthält die Liste keine Einträge. ZWINGEND
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>status</literal>
          </term>
          <listitem>
            <para>
              URLs von Objekten mit skos:prefLabel. Die Zeichenketten
              SOLLEN sowohl die männliche als auch die weibliche Form
              enthalten, und zwar in dem Muster &quot;männliche Form |
              weibliche Form&quot; (genau in der Reihenfolge mit einem
              Leerzeichen vor und nach dem &quot;|&quot;) Wenn sich
              beide Formen nicht unterscheiden, dann DARF die Form nur
              einmal verwendet werden: &quot;Mitglied&quot; und nicht
              &quot;Mitglied | Mitglied&quot;. Dadurch kann auch solche
              Software einen sinnvollen Text anzeigen, die keine
              Fall-Unterscheidung nach Geschecht der Personen vornimmt.
              z.B. &quot;Bürgermeister | Bürgermeisterin&quot;,
              &quot;Bezirksbürgermeister | Bezirksbürgermeisterin&quot;,
              &quot;Stadtverordneter | Stadtverordnete&quot;,
              &quot;Bezirksverordneter | Bezirksverordnete&quot;,
              &quot;Sachkundiger Bürger | Sachkundige Bürgerin&quot;,
              &quot;Einzelstadtverordneter | Einzelstadtverordnete&quot;
              (Mitglieder des Rates die keiner Fraktion/Organisation
              angehören -&gt; die Zuordbarkeit einer fiktiven
              Organisation ermöglichen TODO: warum will man das?). Siehe
              https://github.com/OParl/specs/issues/45 OPTIONAL
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>hasMembership</literal>
          </term>
          <listitem>
            <para>
              URLs der Mitgliedschaft oder Liste von URLs der
              Mitgliedschaften (Objekte vom Typ
              <literal>org:Membership</literal>). TODO: Eventuell
              Unterklasse von org:Membership definieren. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>classification</literal>
          </term>
          <listitem>
            <para>
              <literal>skos:Concept</literal> OPTIONAL
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>created</literal>
          </term>
          <listitem>
            <para>
              Datum/Uhrzeit der Erzeugung des Objekts. EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>lastModified</literal>
          </term>
          <listitem>
            <para>
              Datum/Uhrzeit der letzten Bearbeitung des Objekts.
              EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect3>
  </sect2>
  <sect2 id="oparl_meeting">
    <title>oparl:Meeting (Sitzung)</title>
    <para>
      Eine Sitzung ist die Versammlung einer oder mehrerer Gruppierungen
      (oparl:Organization) zu einem bestimmten Zeitpunkt an einem
      bestimmten Ort.
    </para>
    <para>
      Die geladenen Teilnehmer der Sitzung sind jeweils als Objekte vom
      Typ oparl:Person in entsprechender Form referenziert. Verschiedene
      Dokumente (Einladung, Ergebnis- und Wortprotokoll, sonstige
      Anlagen) können referenziert werden.
    </para>
    <para>
      Die Inhalte einer Sitzung werden durch Tagesordnungspunkte
      (oparl:AgendaItem) abgebildet.
    </para>
    <para>
      Ein Beispiel in expandierter Form:
    </para>
    <programlisting language="json">
{
    &quot;@type&quot;: &quot;http://oparl.org/schema/1.0/Meeting&quot;,
    &quot;@id&quot;: &quot;http://oparl.beispielris.de/meeting/281&quot;,
    &quot;name&quot;: &quot;4. Sitzung des Finanzausschusses&quot;,
    &quot;start&quot;: &quot;2013-01-04T08:00:00+01:00&quot;,
    &quot;end&quot;: &quot;2013-01-04T12:00:00+01:00&quot;,
    &quot;location&quot;: {
        &quot;description&quot;: {
            &quot;@value&quot;: &quot;Rathaus, Raum 136&quot;,
            &quot;@language&quot;: &quot;de&quot;
        },
        &quot;description&quot;: {
            &quot;@value&quot;: &quot;Town Hall, room 136&quot;,
            &quot;@language&quot;: &quot;en&quot;
        }
    },
    &quot;organization&quot;: &quot;http://oparl.beispielris.de/organization/34&quot;,
    &quot;participant&quot;: [
        &quot;http://oparl.beispielris.de/person/29&quot;,
        &quot;http://oparl.beispielris.de/person/75&quot;
        &quot;http://oparl.beispielris.de/person/94&quot;
    ],
    &quot;invitation&quot;: &quot;http://oparl.beispielris.de/document/586&quot;,
    &quot;resultsProtocol&quot;: &quot;http://oparl.beispielris.de/document/628&quot;,
    &quot;verbatimProtocol&quot;: &quot;http://oparl.beispielris.de/document/691&quot;,
    &quot;auxiliaryDocument&quot;: [
        &quot;http://oparl.beispielris.de/document/588&quot;,
        &quot;http://oparl.beispielris.de/document/589&quot;
    ],
    &quot;agendaItem&quot;: {
    // Reihenfolge ist wichtig
        &quot;@list&quot;: [
            &quot;http://oparl.beispielris.de/agendaitem/1045&quot;,
            &quot;http://oparl.beispielris.de/agendaitem/1046&quot;,
            &quot;http://oparl.beispielris.de/agendaitem/1047&quot;,
            &quot;http://oparl.beispielris.de/agendaitem/1048&quot;
        ]
    }
    &quot;created&quot;: &quot;2012-01-06T12:01:00+01:00&quot;,
    &quot;modified&quot;: &quot;2012-01-08T14:05:27+01:00&quot;
}
</programlisting>
    <para>
      Das selbe Beispiel in kompakter Form:
    </para>
    <programlisting language="json">
{
    &quot;@context&quot;: &quot;https://oparl.beispielris.de/Pfad/zum/Kontext/oparl.jsonld&quot;
    &quot;@type&quot;: &quot;oparl:Meeting&quot;,
    &quot;@id&quot;: &quot;http://oparl.beispielris.de/meeting/281&quot;,
    &quot;name&quot;: &quot;4. Sitzung des Finanzausschusses&quot;,
    &quot;start&quot;: &quot;2013-01-04T08:00:00+01:00&quot;,
    &quot;end&quot;: &quot;2013-01-04T12:00:00+01:00&quot;,
    &quot;location&quot;: {
        &quot;description&quot;: &quot;Rathaus, Raum 136&quot;, // default-Sprache ist im Kontext als &quot;de&quot; angegeben
        &quot;description&quot;: {
            &quot;@value&quot;: &quot;Town Hall, room 136&quot;,
            &quot;@language&quot;: &quot;en&quot;
        }
    },
    &quot;organization&quot;: &quot;beispielris:organization/34&quot;,
    &quot;participant&quot;: [
        &quot;beispielris:person/29&quot;,
        &quot;beispielris:person/75&quot;,
        &quot;beispielris:person/94&quot;
    ],
    &quot;invitation&quot;: &quot;beispielris:document/586&quot;,
    &quot;resultsProtocol&quot;: &quot;beispielris:document/628&quot;,
    &quot;verbatimProtocol&quot;: &quot;beispielris:document/691&quot;,
    &quot;auxiliaryDocument&quot;: [
        &quot;beispielris:document/588&quot;,
        &quot;beispielris:document/589&quot;
    ],
    &quot;agendaItem&quot;: [
    // Reihenfolge ist wichtig, deshalb @list im Kontext angeben
        &quot;beispielris:agendaitem/1045&quot;,
        &quot;beispielris:agendaitem/1046&quot;,
        &quot;beispielris:agendaitem/1047&quot;,
        &quot;beispielris:agendaitem/1048&quot;
    ],
    &quot;created&quot;: &quot;2012-01-06T12:01:00+01:00&quot;,
    &quot;modified&quot;: &quot;2012-01-08T14:05:27+01:00&quot;
}
</programlisting>
    <sect3 id="eigenschaften-4">
      <title>Eigenschaften</title>
      <variablelist>
        <varlistentry>
          <term>
            <literal>start</literal>
          </term>
          <listitem>
            <para>
              Datum und Uhrzeit des Anfangszeitpunkts der Sitzung. Bei
              einer zukünftigen Sitzung ist dies der geplante Zeitpunkt,
              bei einer stattgefundenen KANN es der tatsächliche
              Startzeitpunkt sein. ZWINGEND
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>end</literal>
          </term>
          <listitem>
            <para>
              Endzeitpunkt der Sitzung als Datum/Uhrzeit. Bei einer
              zukünftigen Sitzung ist dies der geplante Zeitpunkt, bei
              einer stattgefundenen KANN es der tatsächliche
              Endzeitpunkt sein. EMPFOHLEN
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>location</literal>
          </term>
          <listitem>
            <para>
              Sitzungsort in Form eines
              <literal>oparl:Location</literal> Objekts. EMPFOHLEN
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>organization</literal>
          </term>
          <listitem>
            <para>
              URL der Gruppierung oder Liste der URLs der Gruppierungen
              (oparl:Organization), denen die Sitzung zugeordnet ist.
              Wenn eine Liste angegeben wird, dann ist diese geordnet.
              Das erste Element ist dann das federführende Gremium.
              ZWINGEND
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>participant</literal>
          </term>
          <listitem>
            <para>
              URL der Teilnehmer oder Liste der URLs der Teilnehmer
              (oparl:Person) der Sitzung. Bei einer Sitzung in der
              Zukunft sind dies die geladenen Teilnehmer, bei einer
              stattgefundenen Sitzung SOLL die Liste nur diejenigen
              Teilnehmer umfassen, die tatsächlich an der Sitzung
              teilgenommen haben. ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>invitation</literal>
          </term>
          <listitem>
            <para>
              URL des Einladungsdokuments (oparl:Document) zur Sitzung.
              EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>resultsProtocol</literal>
          </term>
          <listitem>
            <para>
              URL des Ergebnisprotokolls (oparl:Document) zur Sitzung.
              Diese Eigenschaft kann selbstverständlich erst nach dem
              Stattfinden der Sitzung vorkommen. EMPFOHLEN
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>verbatimProtocol</literal>
          </term>
          <listitem>
            <para>
              URL des Wortprotokolls (oparl:Document) zur Sitzung. Diese
              Eigenschaft kann selbstverständlich erst nach dem
              Stattfinden der Sitzung vorkommen. EMPFOHLEN
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>auxiliaryDocument</literal>
          </term>
          <listitem>
            <para>
              URL oder Liste von URLs zu Dokumentenanhängen
              (oparl:Document) zur Sitzung. Hiermit sind Dokumente
              gemeint, die üblicherweise mit der Einladung zu einer
              Sitzung verteilt werden und die nicht bereits über
              einzelne Tagesordnungspunkte referenziert sind. OPTIONAL
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>agendaItem</literal>
          </term>
          <listitem>
            <para>
              URLs der Tagesordnungspunkte (oparl:AgendaItem) der
              Sitzung. Die Reihenfolge ist relevant. Es kann Sitzungen
              ohne TOPs geben. OPTIONAL
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>classification</literal>
          </term>
          <listitem>
            <para>
              <literal>skos:Concept</literal>
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>created</literal>
          </term>
          <listitem>
            <para>
              Datum und Uhrzeit der Erzeugung des Objekts. EMPFOHLEN
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>modified</literal>
          </term>
          <listitem>
            <para>
              Datum und Uhrzeit der letzten Änderung des Objekts.
              EMPFOHLEN
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect3>
  </sect2>
  <sect2 id="oparl_agendaitem">
    <title>oparl:AgendaItem (Tagesordnungspunkt)</title>
    <para>
      Tagesordnungspunkte sind die Bestandteile von Sitzungen
      (<literal>oparl:Meeting</literal>). Jeder Tagesordnungspunkt
      widmet sich inhaltlich einem bestimmten Thema, wozu in der Regel
      auch die Beratung bestimmter Drucksachen gehört.
    </para>
    <para>
      Ein Beispiel in kompakter Form:
    </para>
    <programlisting language="json">
{
    &quot;@context&quot;: &quot;https://oparl.beispielris.de/Pfad/zum/Kontext/oparl.jsonld&quot;
    &quot;@type&quot;: &quot;oparl:AgendaItem&quot;,
    &quot;@id&quot;: &quot;http://oparl.beispielris.de/agendaitem/3271&quot;,
    &quot;meeting&quot;: &quot;beispielris:meeting/281&quot;,
    &quot;number&quot;: &quot;10.1&quot;,
    &quot;name&quot;: &quot;Satzungsänderung für Ausschreibungen&quot;,
    &quot;public&quot;: true,
    &quot;consultations&quot;: [
        &quot;beispielris:consultation/1034&quot;,
        &quot;beispielris:consultation/1235&quot;
    ],
    &quot;result&quot;: &quot;besipielris:vocab/decided_modified&quot;,
    &quot;resolutionText&quot;: &quot;Der Beschluss weicht wie folgt vom Antrag ab: ...&quot;,
    &quot;absentParticipant&quot;: [
        &quot;beispielris:person/75&quot;
    ],
    &quot;paper&quot;: &quot;beispielris:paper/2812&quot;,
    &quot;modified&quot;: &quot;2012-08-16T14:05:27+02:00&quot;
}
</programlisting>
    <sect3 id="eigenschaften-5">
      <title>Eigenschaften</title>
      <variablelist>
        <varlistentry>
          <term>
            <literal>meeting</literal>
          </term>
          <listitem>
            <para>
              URL der Sitzung (<literal>oparl:Meeting</literal>), dem
              der Tagesordnungspunkt zugeordnet ist. ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>number</literal>
          </term>
          <listitem>
            <para>
              Nummer des Tagesordnungspunktes. Eine beliebige
              Zeichenkette, wie z.B. &quot;10.&quot;, &quot;10.1&quot;,
              &quot;C&quot;, &quot;c)&quot; o.ä. Die Reihenfolge wird
              dadurch nicht festgelegt, sondern durch die Reihenfolge
              der TOPs im <literal>agendaItem</literal>-Attribut von
              <literal>oparl:Meeting</literal> OPTIONAL
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>name</literal>
          </term>
          <listitem>
            <para>
              Das Thema des Tagesordnungspunktes. ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>public</literal>
          </term>
          <listitem>
            <para>
              Kennzeichnet, ob der Tagesordnungspunkt zur Behandlung in
              öffentlicher Sitzung vorgesehen ist/war. Es wird ein
              Wahrheitswert (<literal>true</literal> oder
              <literal>false</literal>) erwartet. EMPFOHLEN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>consultation</literal>
          </term>
          <listitem>
            <para>
              Liste der URLs der Beratungen (oparl:Consultation), die
              diesem Tagesordnungspunkt zugewiesen sind, oder alternativ
              die URL zum Abruf dieser Liste. Sofern diesem
              Tagesordnungspunkt keine Beratungen zugewiesen sind,
              bleibt die Liste ohne Einträge. ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>result</literal>
          </term>
          <listitem>
            <para>
              Kategorische Information darüber, welches Ergebnis die
              Beratung des Tagesordnungspunktes erbracht hat. Es wird zu
              einem Objekt verlinkt, welches ein
              <literal>skos:prefLabel</literal>-Attribut mit einer
              Zeichenkette hat. In der Praxis sind hier Kategorien wie
              &quot;Unverändert beschlossen&quot;, &quot;Geändert
              beschlossen&quot;, &quot;Endgültig abgelehnt&quot;,
              &quot;Zur Kenntnis genommen&quot;, &quot;Ohne Votum in
              nachfolgende Gremien überwiesen&quot; und weitere zu
              erwarten. Alternativ können, sobald dieses zur Verfügung
              steht, URLs aus einem OParl Vokabular verwendet werden,
              wie im Beispiel oben zu sehen. Diese dienen dazu,
              Kategorien über Systemgrenzen hinweg maschinenlesbar zu
              vereinheitlichen. EMPFOHLEN
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>resolutionText</literal>
          </term>
          <listitem>
            <para>
              Falls in diesem Tagesordnungspunkt ein Beschluss gefasst
              wurde, kann der Text hier hinterlegt werden. Das ist
              besonders dann in der Praxis relevant, wenn der gefasste
              Beschluss (z.B. durch Änderungsantrag) von der
              Beschlussvorlage abweicht. OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>paper</literal>
          </term>
          <listitem>
            <para>
              <literal>oparl:Paper</literal>. Zwar kann auch das
              <literal>oparl:Meeting</literal> darauf verweisen, aber
              hier sind solche Verweise in der Regel präziser, da sich
              Drucksachen regelmäßig für einen TOP relevant sind und
              nicht für alle TOPs. OPTIONAL
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>
        <literal>auxiliaryDocument</literal> :
        <literal>oparl:Document</literal> zum TOP. OPTIONAL
      </para>
      <variablelist>
        <varlistentry>
          <term>
            <literal>classification</literal>
          </term>
          <listitem>
            <para>
              <literal>skos:Concept</literal>
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>created</literal>
          </term>
          <listitem>
            <para>
              Erzeugungsdatum und -zeit des Objekts. EMPFOHLEN
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>lastModified</literal>
          </term>
          <listitem>
            <para>
              Datum und Uhrzeit der letzten Änderung. EMPFOHLEN
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect3>
  </sect2>
  <sect2 id="oparl_paper">
    <title>oparl:Paper (Drucksache)</title>
    <para>
      Dieser Objekttyp dient der Abbildung von Drucksachen in der
      parlamentarischen Arbeit, wie zum Beispiel Anfragen, Anträgen und
      Beschlussvorlagen.
    </para>
    <para>
      Drucksachen werden in Form einer Beratung (oparl:Consultation) im
      Rahmen eines Tagesordnungspunkts (oparl:AgendaItem) einer Sitzung
      (oparl:Meeting) behandelt.
    </para>
    <para>
      Drucksachen spielen in der schriftlichen wie mündlichen
      Kommunikation eine besondere Rolle, da in vielen Texten auf
      bestimmte Drucksachen Bezug genommen wird. Hierbei kommen in
      parlamentarischen Informationssystemen unveränderliche Kennungen
      der Drucksachen zum Einsatz.
    </para>
    <para>
      Zunächst ein Kontext:
    </para>
    <programlisting language="json">
// consultations als @list deklarieren!
</programlisting>
    <para>
      Ein Beispiel in kompakter Form:
    </para>
    <programlisting language="json">
{
    &quot;@context&quot;: &quot;https://oparl.beispielris.de/Pfad/zum/Kontext/oparl.jsonld&quot;
    &quot;@type&quot;: &quot;oparl:Paper&quot;,
    &quot;@id&quot;: &quot;http://oparl.beispielris.de/paper/749&quot;,
    &quot;reference&quot;: &quot;1234/2014&quot;,
    &quot;publishedDate&quot;: &quot;2014-04-04T16:42:02+02:00&quot;,
    &quot;name&quot;: &quot;Antwort auf Anfrage 1200/2014&quot;,
    &quot;paperType&quot;: &quot;beispielris:vocab/answer&quot;,
    &quot;relatedPaper&quot;: &quot;beispielris:paper/699&quot;,
    &quot;mainDocument&quot;: &quot;beispielris:document/925&quot;,
    &quot;auxiliaryDocument&quot;: &quot;beispielris:document/926&quot;,
    &quot;location&quot;: [
        {
            &quot;description&quot;: &quot;Theodor-Heuss-Ring 1&quot;,
            &quot;lat&quot;: 7.148,
            &quot;lon&quot;: 50.023
        }
    ],
    &quot;creator&quot;: [
        &quot;beispielris:organization/2000&quot;,
        &quot;beispielris:people/1000&quot;
    ],
    &quot;consultation&quot;: [
        &quot;beispielris:consultation/5676&quot;,
        &quot;beispielris:consultation/5689&quot;
    ]
    &quot;lastModified&quot;: &quot;2013-01-08T12:05:27+01:00&quot;
}
</programlisting>
    <sect3 id="eigenschaften-6">
      <title>Eigenschaften</title>
      <variablelist>
        <varlistentry>
          <term>
            <literal>paperType</literal>
          </term>
          <listitem>
            <para>
              Ein Objekt mit einem
              <literal>skos:prefLabel</literal>-Attribut, dessen Wert
              eine Zeichenkette ist und die Art der Drucksache
              beschreibt, z.B. &quot;Beantwortung einer Anfrage&quot;.
              Eine weitere Liste mit exemplarischen Drucksachentypen
              gibt es hier:
              https://wiki.piratenpartei.de/BE:BVVupdates/Glossar Eine
              zukünftige Version von OParl wird möglicherweise solche
              Werte spezifizieren. OPTIONAL
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>classification</literal>
          </term>
          <listitem>
            <para>
              <literal>skos:Concept</literal> mit
              <literal>skos:prefLabel</literal>. Allgemeiner als
              <literal>paperType</literal> OPTIONAL
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>
        TODO:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            Eigenschaften beschreiben
          </para>
        </listitem>
        <listitem>
          <para>
            Eigenschaft &quot;locations&quot; im Beispiel ändern
          </para>
        </listitem>
      </itemizedlist>
    </sect3>
  </sect2>
  <sect2 id="oparl_document">
    <title>oparl:Document (Datei)</title>
    <para>
      Ein Objekt vom Typ <literal>oparl:Document</literal> repräsentiert
      eine Datei, beispielsweise eine PDF-Datei, ein RTF- oder
      ODF-Dokument, und hält Metadaten zu der Datei sowie URLs zum
      Zugriff auf die Datei bereit.
    </para>
    <para>
      Ein Beispiel:
    </para>
    <programlisting language="json">
{
    &quot;@type&quot;: &quot;oparl:Document&quot;,
    &quot;@id&quot;: &quot;http://beispielris.de/document/57739&quot;,
    &quot;name&quot;: &quot;Anlage 1 zur Anfrage&quot;,
    &quot;paper&quot;: &quot;http://beispielris.de/paper/2396&quot;,
    &quot;mimeType&quot;: &quot;application/pdf&quot;,
    &quot;date&quot;: &quot;2013-01-04T07:54:13+01:00&quot;,
    &quot;lastModified&quot;: &quot;2013-01-04T07:54:13+01:00&quot;,
    &quot;sha1Checksum&quot;: &quot;da39a3ee5e6b4b0d3255bfef95601890afd80709&quot;,
    &quot;size&quot;: 82930,
    &quot;accessUrl&quot;: &quot;http://beispielris.de/document/57739.pdf&quot;,
    &quot;downloadUrl&quot;: &quot;http://beispielris.de/document/download/57739.pdf&quot;,
    &quot;text&quot;: &quot;Der Übersichtsplan zeigt alle Ebenen des ...&quot;,
    &quot;masterDocument&quot;: &quot;http://beispielris.de/document/57738&quot;,
    &quot;license&quot;: &quot;http://www.opendefinition.org/licenses/cc-by&quot;,
    &quot;documentRole&quot;: &quot;http://beispielris.de/document-role/evidence&quot;,
}
</programlisting>
    <para>
      Objekt vom Typ <literal>oparl:Document</literal> können mit
      Drucksachen (<literal>oparl:Paper</literal>) oder Sitzungen
      (<literal>oparl:Meeting</literal>) in Beziehung stehen. Dies wird
      durch die Eigenschaft <literal>paper</literal> bzw.
      <literal>meeting</literal> angezeigt.
    </para>
    <para>
      Mehrere Objekte vom Typ <literal>oparl:Document</literal> können
      mit einander in direkter Beziehung stehen, wenn sie den selben
      Inhalt in unterschiedlichen technischen Formaten wiedergeben.
      Hierfür werden die Eigenschaften
      <literal>master_document</literal> bzw.
      <literal>derivative_documents</literal> eingesetzt. Das oben
      angezeigte Beispiel-Objekt repräsentiert eine PDF-Datei (zu
      erkennen an der Eigenschaft <literal>mime_type</literal>) und
      zeigt außerdem über die Eigenschaft
      <literal>master_document</literal> an, von welcher anderen Datei
      es abgeleitet wurde. Umgekehrt KANN über die Eigenschaft
      <literal>derivative_documents</literal> angezeigt werden, welche
      Ableitungen einer Datei existieren.
    </para>
    <sect3 id="eigenschaften-7">
      <title>Eigenschaften</title>
      <variablelist>
        <varlistentry>
          <term>
            <literal>@id</literal>
          </term>
          <listitem>
            <para>
              Die URL des Objekts.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>name</literal>
          </term>
          <listitem>
            <para>
              Name des Objekts, der Nutzern angezeigt werden kann. Typ:
              Zeichenkette. ZWINGEND
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>mimeType</literal>
          </term>
          <listitem>
            <para>
              Mime-Typ des Inhalts (vgl. RFC2046<footnote>
                <para>
                  <ulink url="http://tools.ietf.org/html/rfc2046">http://tools.ietf.org/html/rfc2046</ulink>
                </para>
              </footnote>). Sollte das System einer Datei keinen
              spezifischen Typ zuweisen können, wird EMPFOHLEN, hier
              &quot;application/octet-stream&quot; zu verwenden.
              ZWINGEND
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>date</literal>
          </term>
          <listitem>
            <para>
              Erstellungs- oder Veröffentlichungsdatum und -uhrzeit.
              Typ: Datum. ZWINGEND
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>lastModified</literal>
          </term>
          <listitem>
            <para>
              Datum und Uhrzeit der letzten Änderung der Datei bzw. der
              Metadaten. Typ: Datum. ZWINGEND
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>size</literal>
          </term>
          <listitem>
            <para>
              Größe der Datei in Bytes. Typ: ganze Zahl. ZWINGEND
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>sha1Checksum</literal>
          </term>
          <listitem>
            <para>
              SHA1-Prüfsumme des Dokumenteninhalts in
              Hexadezimal-Schreibweise. Typ: Zeichenkette. OPTIONAL
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>text</literal>
          </term>
          <listitem>
            <para>
              Reine Text-Wiedergabe des Dateiinhalts, sofern dieser in
              Textform wiedergegeben werden kann. Typ: Zeichenkette.
              EMPFOHLEN
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>accessUrl</literal>
          </term>
          <listitem>
            <para>
              URL zum gewöhnlichen Abruf der Datei mittels HTTP
              GET-Aufruf. Typ: URL. ZWINGEND
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>downloadUrl</literal>
          </term>
          <listitem>
            <para>
              URL zum Download der Datei. Besser ist es, bereits unter
              <literal>accessUrl</literal> einen &quot;schönen&quot;
              Dateinamen anzugeben. TODO: Zweck erklären. Typ: URL.
              EMPFOHLEN
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>paper</literal>
          </term>
          <listitem>
            <para>
              Zugehöriges Objekts vom Typ
              <literal>oparl:Paper</literal>, sofern diese Datei zu
              einer Drucksache gehört. Wenn diese Datei zu einer
              Drucksache gehört, MUSS diese Eigenschaft vorhanden sein,
              andernfalls DARF sie NICHT vorhanden sein. Typ: URL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>meeting</literal>
          </term>
          <listitem>
            <para>
              Zugehöriges Objekt vom Typ
              <literal>oparl:Meeting</literal>, sofern diese Datei zu
              einer Sitzung gehört. Wenn diese Datei zu einer Sitzung
              gehört, MUSS diese Eigenschaft vorhanden sein, andernfalls
              DARF sie NICHT vorhanden sein. Typ: URL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>masterDocument</literal>
          </term>
          <listitem>
            <para>
              <literal>oparl:Document</literal>, von dem das aktuelle
              Objekt abgeleitet wurde. Typ: URL. OPTIONAL
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>derivativeDocuments</literal>
          </term>
          <listitem>
            <para>
              <literal>oparl:Document</literal>, die von dem aktuellen
              Objekt abgeleitet wurden. Typ: URL. OPTIONAL
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>license</literal>
          </term>
          <listitem>
            <para>
              Lizenz unter der die Datei angeboten wird. Wenn diese
              Eigenschaft verwendet wird, dann ist sie massgeblich und
              nicht die globalere Angabe in dem
              <literal>oparl:Body</literal> Objekt der Körperschaft.
              Lesenswert zum Thema Lizensierung von Linked Data ist
              http://linkeddatabook.com/editions/1.0/#htoc48 Type: URL
              OPTIONAL
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>documentRole</literal>
          </term>
          <listitem>
            <para>
              Rolle, Funktion, Sorte des Dokuments. Das Objekt enthält
              ein <literal>skos:prefLabel</literal>. Dessen Werte können
              z.B. sein: &quot;Einladung&quot;, &quot;Protokoll&quot;,
              &quot;Wortprotokoll&quot; oder
              &quot;Beschlussprotokoll&quot;. In einer zukünftigen
              OParl-Version wird möglicherweise eine Menge der
              wichtigsten Kategorien vorgegeben. TODO: Besser in
              <literal>oparl:Paper</literal> oder
              <literal>oparl:Meeting</literal> ? Siehe Diskussion unter
              https://github.com/OParl/specs/issues/65 Typ: URL OPTIONAL
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>classification</literal>
          </term>
          <listitem>
            <para>
              <literal>skos:Concept</literal> mit
              <literal>skos:prefLabel</literal>. Hat allgemeinere
              Bedeutung als <literal>documentRole</literal>. Typ: URL
              OPTIONAL
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect3>
    <sect3 id="siehe-auch">
      <title>Siehe auch</title>
      <itemizedlist>
        <listitem>
          <para>
            <link linkend="dokumentenabruf">Dokumentenabruf</link>
          </para>
        </listitem>
      </itemizedlist>
    </sect3>
  </sect2>
  <sect2 id="oparl_consultation">
    <title>oparl:Consultation (Beratung)</title>
    <para>
      Der Objekttyp <literal>oparl:Consultation</literal> dient dazu,
      die Beratung einer Drucksache
      (<link linkend="oparl_paper"><literal>oparl:Paper</literal></link>)
      in einer Sitzung abzubilden. Dabei ist es nicht entscheidend, ob
      diese Beratung in der Vergangenheit stattgefunden hat oder diese
      für die Zukunft geplant ist.
    </para>
    <para>
      Die Gesamtheit aller Objekte des Typs
      <literal>oparl:Consultation</literal> zu einer bestimmten
      Drucksache bildet das ab, was in der Praxis als
      &quot;Beratungsfolge&quot; der Drucksache bezeichnet wird.
    </para>
    <para>
      Ein Beispiel:
    </para>
    <programlisting language="json">
{
    &quot;@type&quot;: &quot;oparl:Consultation&quot;,
    &quot;@id&quot;: &quot;http://beispielris.de/consultation/47594&quot;,
    &quot;paper&quot;: &quot;http://beispielris.de/paper/2396&quot;,
    &quot;agendaitem&quot;: &quot;http://beispielris.de/agendaitem/15569&quot;,
    &quot;committee&quot;: &quot;http://beispielris.de/organization/96&quot;,
    &quot;authoritative&quot;: false,
    &quot;role&quot;: &quot;http://beispielris.de/role/decision&quot;
}
</programlisting>
    <para>
      Das selbe Beispiel in kompakter Form (ein passender Kontext wird
      vorausgesetzt):
    </para>
    <programlisting language="json">
{
    &quot;@context&quot;: &quot;https://oparl.beispielris.de/Pfad/zum/Kontext/oparl.jsonld&quot;
    &quot;@type&quot;: &quot;oparl:Consultation&quot;,
    &quot;@id&quot;: &quot;beispielris:consultation/47594&quot;,
    &quot;paper&quot;: &quot;beispielris:paper/2396&quot;,
    &quot;agendaitem&quot;: &quot;beispielris:agendaitem/15569&quot;,
    &quot;committee&quot;: &quot;beispielris:organization/96&quot;,
    &quot;authoritative&quot;: false,
    &quot;role&quot;: &quot;beispielris:role/decision&quot;
}
</programlisting>
    <para>
      Das Objekt &quot;beispielris:roles/decision&quot; kann so
      aussehen:
    </para>
    <programlisting language="json">
{
    &quot;@context&quot;: &quot;https://oparl.beispielris.de/Pfad/zum/Kontext/oparl.jsonld&quot;
    &quot;@id&quot;: &quot;beispielris:role/decision&quot;,
    &quot;prefLabel&quot;: {
        &quot;de&quot;: &quot;Entscheidung&quot;,
        &quot;en&quot;: &quot;decision&quot;
    }
}
</programlisting>
    <sect3 id="eigenschaften-8">
      <title>Eigenschaften</title>
      <variablelist>
        <varlistentry>
          <term>
            <literal>paper</literal>
          </term>
          <listitem>
            <para>
              URL der Drucksache, die beraten wird. ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>agendaitem</literal>
          </term>
          <listitem>
            <para>
              URL des Tagesordnungspunktes (oparl:Agendaitem), unter dem
              die Drucksache beraten wird. ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>committee</literal>
          </term>
          <listitem>
            <para>
              URL des Gremiums (oparl:Organization), dem die Sitzung
              zugewiesen ist, zu welcher der zuvor genannte
              Tagesordnungspunkt gehört. Hier kann auch eine mit Liste
              von Gremien angegeben werden (die verschiedenen
              <literal>oparl:Body</literal> und
              <literal>oparl:System</literal> angehören können). Die
              Liste ist dann geordnet. Das erste Gremium der Liste ist
              federführend. ZWINGEND.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>authoritative</literal>
          </term>
          <listitem>
            <para>
              Drückt aus, ob bei dieser Beratung ein Beschluss zu der
              Drucksache gefasst wird (<emphasis>true</emphasis>) wird
              oder nicht (<emphasis>false</emphasis>). Typ:
              Wahrheitswert. Diese Eigenschaft ist OPTIONAL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>role</literal>
          </term>
          <listitem>
            <para>
              <literal>skos:Concept</literal> Rolle oder Funktion der
              Beratung. z.B. Anhörung (hearing), Entscheidung
              (decision), Kenntnisnahme (notice), Vorberatung
              (counseling) usw. Es wird empfohlen in den URLs
              entsprechende englische Bestandteile zu verwenden. Die
              Rollenobjekte haben nur eine festgelegte Eigenschaft:
              <literal>skos:prefLabel</literal> für den Namen. In einer
              zukünftigen Version von OParl können gegebenenfalls die am
              stärksten benötigten Rollen standardisiert werden.
              OPTIONAL
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>classification</literal>
          </term>
          <listitem>
            <para>
              <literal>skos:Concept</literal> mit
              <literal>skos:prefLabel</literal>. Allgemeiner verwendbar
              als <literal>role</literal>. OPTIONAL
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect3>
  </sect2>
  <sect2 id="oparl_location">
    <title>oparl:Location (Ort)</title>
    <para>
      Dieser Objekttyp dient dazu, den Ortsbezug einer Drucksache formal
      abzubilden. Ortsangaben können sowohl aus Textinformationen
      bestehen (beispielsweise dem Namen einer Straße/eines Platzes oder
      eine genaue Adresse) als auch aus Geodaten.
    </para>
    <para>
      In der Praxis soll dies dazu dienen, den geografischen Bezug eines
      politischen Vorgangs, wie zum Beispiel eines Bauvorhabens oder der
      Änderung eines Flächennutzungsplanes, maschinenlesbar
      nachvollziehbar zu machen.
    </para>
    <para>
      Dieser Objekttyp kann für Objekte im Kontext des Objekttyps
      <literal>oparl:Paper</literal> verwendet werden.
    </para>
    <para>
      Ein einfaches Beispiel - welches GeoJSON verwendet und deshalb nur
      der Illustration dient:
    </para>
    <programlisting language="json">
{
    ...
    &quot;location&quot;: {
        &quot;description&quot;: &quot;Honschaftsstra\u00dfe 312, K\u00f6ln&quot;, // TODO: weshalb diese Kodierung?!
        &quot;geometry&quot;: {
            &quot;type&quot;: &quot;Point&quot;,
            &quot;coordinates&quot;: [7.03291, 50.98249]
        }
    },
    ...
}
</programlisting>
    <para>
      In der JSON-LD Recommendation des W3C ist diese Passage zu finden:
      <subscript>~</subscript>~~ List of lists in the form of list
      objects are not allowed in this version of JSON-LD. This decision
      was made due to the extreme amount of added complexity when
      processing lists of lists. <subscript>~</subscript>~~
    </para>
    <para>
      Das lässt sich nicht mit der Verwendung von GeoJSON vereinbaren,
      denn dort sind die Geometriedaten bei vielen Objektarten in Form
      von verschachtelten Listen kodiert. Zwar gibt es eine Iniatitive
      zur Schaffung von GeoJSON-LD (siehe http://geojson.org/vocab und
      https://github.com/geojson/geojson-ld), diese Spezifikation hat
      bisher jedoch keinen verwendbaren Zustand erreicht, so dass sie
      nicht für OParl 1.0 verwendbar ist.
    </para>
    <para>
      Statt GeoJSON oder GeoJSON-LD wird deshalb der semantisch
      gleichwertige und etablierte Standard &quot;Well-Known Text&quot;
      (WKT) verwendet (siehe
      http://en.wikipedia.org/wiki/Well-known_text).
    </para>
    <para>
      WKT ist: - präzise spezifiziert a) ISO/IEC 13249-3:2011 standard,
      &quot;Information technology -- Database languages -- SQL
      multimedia and application packages -- Part 3: Spatial&quot;
      (SQL/MM) b) &quot;OpenGIS ® Implementation Standard for Geographic
      information - Simple feature access - Part 1: Common
      architecture&quot; - semantisch ebenso ausdrucksstark wie GeoJSON
      / GeoJSON-LD - auch durch Linked Data Technik weitreichend
      unterstützt (GeoSPARQL, Apache Jena spatial extension) - leicht
      von und nach GeoJSON konvertierbar
      (http://en.wikipedia.org/wiki/Well-known_text#APIs_that_provide_support)
    </para>
    <para>
      TODO: neue Beispiele
    </para>
    <para>
      Ein Kontext:
    </para>
    <programlisting>
{
   &quot;geometry&quot;:
   {
     &quot;@type&quot;: &quot;ogc:wktLiteral&quot; 
   }
}
</programlisting>
    <para>
      Und ein Beispiel unter Verwendung des Kontextes:
    </para>
    <programlisting language="json">
{
    // ...
    &quot;location&quot;: {
        &quot;description&quot;: &quot;Honschaftsstra\u00dfe 312, K\u00f6ln&quot;,
        &quot;geometry&quot;: &quot;POINT (7.03291 50.98249)&quot;
    },
    // ...
}
</programlisting>
    <para>
      OParl sieht bei Angabe von Geodaten die Verwendung des<literallayout>
</literallayout>GeoJSON-Formats<footnote>
        <para>
          GeoJSON Spezifikation
          <ulink url="http://geojson.org/geojson-spec.html">http://geojson.org/geojson-spec.html</ulink>
        </para>
      </footnote> vor. GeoJSON erlaubt die Beschreibung von vielen
      unterschiedlichen Geometrien wie Punkten, Pfaden und Polygonen in
      JSON-Notation. Ein GeoJSON-Objekt kann auch mehrere Geometrien
      umfassen, beispielsweise um damit mehrere Punkte oder Polygone zu
      umschreiben.
    </para>
    <para>
      Gegenüber der GeoJSON-Spezifikation sieht OParl eine wichtige
      Einschränkung vor: Für die Ausgabe über eine OParl API MÜSSEN
      sämtliche Koordinatenangaben im System WGS84<footnote>
        <para>
          WGS84 steht für &quot;World Geodetic System 1984&quot;, es
          wird unter anderem auch vom Global Positioning System (GPS)
          verwendet. In geografischen Informationssystemen ist für das
          System der EPSG-Code 4326 geläufig.
        </para>
      </footnote> angegeben werden, und zwar in Form von Zahlenwerten
      (Fließkommazahlen) für Längen- und Breitengrad.
    </para>
    <sect3 id="eigenschaften-9">
      <title>Eigenschaften</title>
      <variablelist>
        <varlistentry>
          <term>
            <literal>description</literal>
          </term>
          <listitem>
            <para>
              Textliche Beschreibung eines Orts, z.B. in Form einer
              Adresse. Typ: Zeichenkette. EMPFOHLEN
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>geometry</literal>
          </term>
          <listitem>
            <para>
              Geodaten-Repräsentation des Orts. Ist diese Eigenschaft
              gesetzt, MUSS ihr Wert der Spezifikation von Well-Known
              Text (WKT) entsprechen. OPTIONAL
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>classification</literal>
          </term>
          <listitem>
            <para>
              <literal>skos:Concept</literal> mit
              <literal>skos:prefLabel</literal> OPTIONAL
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect3>
    <sect3 id="weitere-beispiele">
      <title>Weitere Beispiele</title>
      <sect4 id="ortsangabe-mit-polygon-objekt">
        <title>Ortsangabe mit Polygon-Objekt</title>
        <para>
          Die alte GeoJSON-Variante:
        </para>
        <programlisting language="json">
{
    &quot;description&quot;: &quot;Rechtes Rheinufer zwischen Deutzer
        Br\u00fccke und Hohenzollernbr\u00fccke&quot;,
    &quot;type&quot;: &quot;Polygon&quot;,
    &quot;geometry&quot;: {
        &quot;coordinates&quot;: [
            [
                [6.9681106, 50.9412137],
                [6.9690940, 50.9412137],
                [6.9692169, 50.9368270],
                [6.9681218, 50.9368270],
                [6.9681106, 50.9412137]
            ]
        ]
    }
}
</programlisting>
        <para>
          Und die neue Version mit Well-Known Text:
        </para>
        <programlisting language="json">
{
    &quot;description&quot;: &quot;Rechtes Rheinufer zwischen Deutzer
        Br\u00fccke und Hohenzollernbr\u00fccke&quot;,
    &quot;geometry&quot;: &quot;POLYGON ((
                6.9681106 50.9412137,
                6.9690940 50.9412137,
                6.9692169 50.9368270,
                6.9681218 50.9368270,
                6.9681106 50.9412137))&quot;
}
</programlisting>
      </sect4>
    </sect3>
  </sect2>
  <sect2 id="oparl_membership">
    <title>org:Membership oder oparl:Membership</title>
    <para>
      TODO. Siehe: https://github.com/OParl/specs/issues/122
      https://github.com/OParl/specs/issues/109
    </para>
    <sect3 id="eigenschaften-10">
      <title>Eigenschaften</title>
      <variablelist>
        <varlistentry>
          <term>
            <literal>person</literal>
          </term>
          <listitem>
            <para>
              <literal>oparl:Person</literal> Eine Person. OPTIONAL
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>organization</literal>
          </term>
          <listitem>
            <para>
              <literal>oparl:Organization</literal> Eine Organization.
              OPTIONAL
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>role</literal>
          </term>
          <listitem>
            <para>
              zeigt auf ein Objekt der Klasse
              <literal>org:Role</literal> oder einer Unterklasse. Das
              Objekt hat eine
              <literal>skos:prefLabel</literal>-Eigenschaft, deren Wert
              eine Funktionsbezeichnung ist, z.B. &quot;1. pers.
              Vertreter | 1. pers. Vertreterin&quot; oder &quot;2. pers.
              Vertreter | 2. pers. Vertreterin&quot;. Popolo: &quot;The
              role that the person fulfills in the organization&quot;.
              normale Mitglieder haben in der Regel keine eigene
              Funktion, aber auch eine Unterscheidung zwischen z.B.
              &quot;Sachkundige Bürger | Sachkundige Bürgerin&quot; und
              &quot;Ratsherr | Ratsfrau&quot; bei einfachen Mitgliedern
              ist hiermit möglich. TODO: was ist mit einem sachkundigen
              Bürger, der gleichzeitig Vorsitzender ist? OPTIONAL
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>post</literal>
          </term>
          <listitem>
            <para>
              The post held by the person in the organization OPTIONAL
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>onBehalfOf</literal>
          </term>
          <listitem>
            <para>
              Entsendende Organization - Fraktion, fraktionslos oder
              externes Gremium Dies entspricht
              <literal>opengov:onBehalfOf</literal> in Popolo. TODO: wie
              wird fraktionslos kodiert? OPTIONAL
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>startDate</literal>
          </term>
          <listitem>
            <para>
              <literal>schema:validFrom</literal> wie in Popolo. The
              date on which the relationship began OPTIONAL
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>endDate</literal>
          </term>
          <listitem>
            <para>
              <literal>schema:validThrough</literal> wie in Popolo. The
              date on which the relationship ended OPTIONAL
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect3>
    <sect3 id="hinweise">
      <title>Hinweise</title>
      <para>
        http://www.w3.org/TR/vocab-org/#membership-roles-posts-and-reporting
      </para>
      <para>
        http://popoloproject.com/specs/membership.html
      </para>
    </sect3>
  </sect2>
</sect1>
<sect1 id="fußnoten">
  <title>Fußnoten</title>
  <para>
    [14]: Frankfurt Gestalten
    <ulink url="http://www.geojson.org/">www.geojson.org</ulink>
  </para>
  <para>
    [15]: Offenes Köln
    <ulink url="http://offeneskoeln.de/">offeneskoeln.de</ulink>
  </para>
  <para>
    [16]: OpenRuhr:RIS
    <ulink url="http://openruhr.de/openruhrris/">openruhr.de/openruhrris</ulink>
  </para>
</sect1>
<sect1 id="glossar">
  <title>Glossar</title>
  <variablelist>
    <varlistentry>
      <term>
        IRI
      </term>
      <listitem>
        <para>
          Internationalized Resource Identifier ist die
          internationalisierte Form der Uniform Resource Identifier
          (URI). Diese sind in RFC 3987 spezifiziert
          (http://tools.ietf.org/html/rfc3987). In der
          OParl-Spezifikation sind grundsätzlich auch dann IRIs gemeint,
          wenn die Bezeichnungen URI oder URL verwendet werden. Dies
          dient der Lesbarkeit, auch wenn es technisch nicht korrekt
          ist.
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>
        JSON
      </term>
      <listitem>
        <para>
          JavaScript Object Notation ist ein strukturiertes Datenformat,
          welches als Teil von JavaScript bzw. ECMAScript spezifiziert
          ist.
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>
        JSON-LD
      </term>
      <listitem>
        <para>
          JSON for Linked Data
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>
        RIS
      </term>
      <listitem>
        <para>
          Ratsinformationssystem
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>
        URI
      </term>
      <listitem>
        <para>
          Uniform Resource Identifier. In der OParl-Spezifikation sind
          grundsätzlich auch dann IRIs gemeint, wenn die Bezeichnung URI
          verwendet wird.
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>
        URL
      </term>
      <listitem>
        <para>
          Uniform Resource Locator. In der OParl-Spezifikation sind
          grundsätzlich auch dann IRIs gemeint, wenn die Bezeichnungen
          URL verwendet wird.
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>
        WGS 84
      </term>
      <listitem>
        <para>
          World Geodetic System 1984. Ein weltweites Referenzsystem für
          die Interpretation von Geokoordinaten-Angaben.
        </para>
      </listitem>
    </varlistentry>
  </variablelist>
</sect1>
<sect1 id="jsonld_ressourcen_oparlorg">
  <title>JSON-LD-Ressourcen auf oparl.org</title>
  <para>
    TODO: Beschreiben, wo weitere Informationen über
    JSON-LD-Kontextdokumente zu finden sein werden.
  </para>
</sect1>
